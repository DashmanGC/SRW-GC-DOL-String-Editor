/*
 * Copyright (C) 2014 Dashman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * UserInterfaceDSE.java
 *
 * Created on 08-ago-2014, 16:35:57
 */

package srwgcdolstringeditor;

import java.awt.Component;
import java.awt.Dimension;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jonatan
 */
public class UserInterfaceDSE extends javax.swing.JFrame {

    public class DOLstring{
        public String text;
        public long text_offset;    // The offset of the string inside the DOL file
        public long[] pointers;     // Offsets of the pointers referencing this text in the DOL file

        public DOLstring(){
            text = "";
            text_offset = 0;
            pointers = null;
        }
    }

    DOLstring[] unit_ability;
    DOLstring[] pilot_skill;
    DOLstring[] fub;
    DOLstring[] series;
    DOLstring[] bgm;
    DOLstring[] search;
    DOLstring[] option;
    DOLstring[] scenario;
    DOLstring[] capture;
    DOLstring[] deploy;
    DOLstring[] extra;
    DOLstring[] layzner;
    DOLstring[] win;
    DOLstring[] lose;
    DOLstring[] black_screen;
    DOLstring[] opening;
    DOLstring[] ending;
    DOLstring[] staff;
    DOLstring[] cast;
    DOLstring[] mem_card;
    DOLstring[] name_entry;

    String lastDirectory = ".";
    String current_file = "";
    String title = "SRW GC DOL String Editor by Dashman";
    boolean file_loaded = false;
    int current_category = 0;
    
    String font_encoding = "MS932";

    /** Creates new form UserInterfaceDSE */
    public UserInterfaceDSE() {
        initComponents();

        this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource("resources/icons/logo.png")).getImage());

        scrollStrings.getVerticalScrollBar().setUnitIncrement(16);

        initCategories();

        loadCategory();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNavigation = new javax.swing.JPanel();
        labelCategory = new javax.swing.JLabel();
        comboCategory = new javax.swing.JComboBox();
        checkSJIS = new javax.swing.JCheckBox();
        labelOffset = new javax.swing.JLabel();
        textfieldOffset = new javax.swing.JTextField();
        scrollStrings = new javax.swing.JScrollPane();
        panelLines = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuitemOpenDOL = new javax.swing.JMenuItem();
        menuitemImportBIN = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        menuitemExport = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        menuitemOverride = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        menuitemExit = new javax.swing.JMenuItem();
        menuTools = new javax.swing.JMenu();
        menuitemConvertSJIS = new javax.swing.JMenuItem();
        menuConvertASCII = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SRW GC DOL String Editor by Dashman");
        setResizable(false);

        panelNavigation.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));

        labelCategory.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCategory.setText("Category:");

        comboCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Unit Abilities", "Pilot Skills", "Full Upgrade Bonuses", "Series Titles", "BGM Names", "Search Menu", "Options Menu", "Scenario Menu", "Capture Menu", "Deployment Menu", "Extra Menu Strings", "Layzner Upgrades", "Win Conditions", "Lose Conditions", "Black Screen Text", "Opening Roll", "Ending Roll", "Staff Roll", "Cast", "Memory Card Management", "Name Entry" }));
        comboCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoryActionPerformed(evt);
            }
        });

        checkSJIS.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkSJIS.setText("Convert keystrokes to SJIS");
        checkSJIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSJISActionPerformed(evt);
            }
        });

        labelOffset.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelOffset.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelOffset.setText("Starting Offset:");

        textfieldOffset.setText("809F713A");

        javax.swing.GroupLayout panelNavigationLayout = new javax.swing.GroupLayout(panelNavigation);
        panelNavigation.setLayout(panelNavigationLayout);
        panelNavigationLayout.setHorizontalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkSJIS)
                .addGap(18, 18, 18)
                .addComponent(labelOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textfieldOffset)
                .addContainerGap())
        );
        panelNavigationLayout.setVerticalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCategory)
                    .addComponent(comboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkSJIS)
                    .addComponent(labelOffset)
                    .addComponent(textfieldOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrollStrings.setPreferredSize(new java.awt.Dimension(825, 433));

        javax.swing.GroupLayout panelLinesLayout = new javax.swing.GroupLayout(panelLines);
        panelLines.setLayout(panelLinesLayout);
        panelLinesLayout.setHorizontalGroup(
            panelLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 857, Short.MAX_VALUE)
        );
        panelLinesLayout.setVerticalGroup(
            panelLinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        scrollStrings.setViewportView(panelLines);

        menuFile.setText("File");

        menuitemOpenDOL.setText("Import strings from DOL file");
        menuitemOpenDOL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOpenDOLActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOpenDOL);

        menuitemImportBIN.setText("Import strings from BIN file");
        menuitemImportBIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemImportBINActionPerformed(evt);
            }
        });
        menuFile.add(menuitemImportBIN);
        menuFile.add(jSeparator1);

        menuitemExport.setText("Export strings to BIN file");
        menuitemExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemExportActionPerformed(evt);
            }
        });
        menuFile.add(menuitemExport);
        menuFile.add(jSeparator2);

        menuitemOverride.setText("Override DOL pointers");
        menuitemOverride.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOverrideActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOverride);
        menuFile.add(jSeparator3);

        menuitemExit.setText("Exit");
        menuitemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuitemExit);

        jMenuBar1.add(menuFile);

        menuTools.setText("Tools");

        menuitemConvertSJIS.setText("Convert strings to SJIS");
        menuitemConvertSJIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemConvertSJISActionPerformed(evt);
            }
        });
        menuTools.add(menuitemConvertSJIS);

        menuConvertASCII.setText("Convert strings to ASCII");
        menuConvertASCII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertASCIIActionPerformed(evt);
            }
        });
        menuTools.add(menuConvertASCII);

        jMenuBar1.add(menuTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollStrings, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelNavigation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollStrings, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkSJISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSJISActionPerformed
        // TODO add your handling code here:
        Component[] lines = panelLines.getComponents();

        for (int i = 0; i < lines.length; i++){
            PanelString l = (PanelString) lines[i];
            l.setSJIS(checkSJIS.isSelected());
        }
    }//GEN-LAST:event_checkSJISActionPerformed

    private void comboCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoryActionPerformed
        // TODO add your handling code here:
        int new_category = comboCategory.getSelectedIndex();
        if (new_category != current_category){
            saveCategory();
            current_category = new_category;
            loadCategory();
        }
    }//GEN-LAST:event_comboCategoryActionPerformed

    private void menuitemConvertSJISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemConvertSJISActionPerformed
        // TODO add your handling code here:
        Component[] lines = panelLines.getComponents();

        for (int i = 0; i < lines.length; i++){
            PanelString l = (PanelString) lines[i];
            l.convertToSJIS();
        }
    }//GEN-LAST:event_menuitemConvertSJISActionPerformed

    private void menuitemOpenDOLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOpenDOLActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Load DOL file");
        chooser.setFileFilter(new FileNameExtensionFilter("DOL file", "DOL"));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            openDOL(chooser.getSelectedFile().getAbsolutePath());

            lastDirectory = chooser.getSelectedFile().getPath();

            current_file = chooser.getSelectedFile().getName();

            this.setTitle(current_file + " - " + title);
        }
    }//GEN-LAST:event_menuitemOpenDOLActionPerformed

    private void menuitemExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemExportActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Save to BIN file");
        chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "BIN"));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            saveCategory();
            
            saveBIN(chooser.getSelectedFile().getAbsolutePath());

            lastDirectory = chooser.getSelectedFile().getPath();

            current_file = chooser.getSelectedFile().getName();

            //this.setTitle(current_file + " - " + title);
        }
    }//GEN-LAST:event_menuitemExportActionPerformed

    private void menuitemImportBINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemImportBINActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Load BIN file");
        chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "BIN"));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            openBIN(chooser.getSelectedFile().getAbsolutePath());

            lastDirectory = chooser.getSelectedFile().getPath();

            current_file = chooser.getSelectedFile().getName();

            this.setTitle(current_file + " - " + title);
        }
    }//GEN-LAST:event_menuitemImportBINActionPerformed

    private void menuitemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuitemExitActionPerformed

    private void menuitemOverrideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOverrideActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Override DOL file");
        chooser.setFileFilter(new FileNameExtensionFilter("DOL file", "DOL"));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            overrideDOL(chooser.getSelectedFile().getAbsolutePath());

            lastDirectory = chooser.getSelectedFile().getPath();

            current_file = chooser.getSelectedFile().getName();

            //this.setTitle(current_file + " - " + title);
        }
    }//GEN-LAST:event_menuitemOverrideActionPerformed

    private void menuConvertASCIIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertASCIIActionPerformed
        // TODO add your handling code here:
        saveCategory();
        
        for (int i = 0; i < unit_ability.length; i++){
                unit_ability[i].text = convertToASCII(unit_ability[i].text);
        }
        
        for (int i = 0; i < pilot_skill.length; i++){
                pilot_skill[i].text = convertToASCII(pilot_skill[i].text);
        }
        
        for (int i = 0; i < fub.length; i++){
                fub[i].text = convertToASCII(fub[i].text);
        }
        
        for (int i = 0; i < series.length; i++){
                series[i].text = convertToASCII(series[i].text);
        }
        
        for (int i = 0; i < bgm.length; i++){
                bgm[i].text = convertToASCII(bgm[i].text);
        }
        
        for (int i = 0; i < search.length; i++){
                search[i].text = convertToASCII(search[i].text);
        }
        
        for (int i = 0; i < option.length; i++){
                option[i].text = convertToASCII(option[i].text);
        }
        
        for (int i = 0; i < scenario.length; i++){
                scenario[i].text = convertToASCII(scenario[i].text);
        }
        
        for (int i = 0; i < capture.length; i++){
                capture[i].text = convertToASCII(capture[i].text);
        }
        
        for (int i = 0; i < deploy.length; i++){
                deploy[i].text = convertToASCII(deploy[i].text);
        }
        
        for (int i = 0; i < extra.length; i++){
                extra[i].text = convertToASCII(extra[i].text);
        }
        
        for (int i = 0; i < layzner.length; i++){
                layzner[i].text = convertToASCII(layzner[i].text);
        }
        
        for (int i = 0; i < win.length; i++){
                win[i].text = convertToASCII(win[i].text);
        }
        
        for (int i = 0; i < lose.length; i++){
                lose[i].text = convertToASCII(lose[i].text);
        }
        
        for (int i = 0; i < black_screen.length; i++){
                black_screen[i].text = convertToASCII(black_screen[i].text);
        }
        
        for (int i = 0; i < opening.length; i++){
                opening[i].text = convertToASCII(opening[i].text);
        }
        
        for (int i = 0; i < ending.length; i++){
                ending[i].text = convertToASCII(ending[i].text);
        }
        
        for (int i = 0; i < staff.length; i++){
                staff[i].text = convertToASCII(staff[i].text);
        }
        
        for (int i = 0; i < cast.length; i++){
                cast[i].text = convertToASCII(cast[i].text);
        }
        
        for (int i = 0; i < mem_card.length; i++){
                mem_card[i].text = convertToASCII(mem_card[i].text);
        }
        
        for (int i = 0; i < name_entry.length; i++){
                name_entry[i].text = convertToASCII(name_entry[i].text);
        }
        
        loadCategory();
    }//GEN-LAST:event_menuConvertASCIIActionPerformed


    public void initCategories(){
        initUnitAbilities();
        initPilotSkills();
        initFUBs();
        initTitles();
        initBGMs();
        initSearchMenu();
        initOptionMenu();
        initScenarioMenu();
        initCaptureMenu();
        initDeployMenu();
        initExtraMenu();
        initLayzner();
        initWinConditions();
        initLoseConditions();
        initBlackScreen();
        initOpening();
        initEnding();
        initStaff();
        initCast();
        initMemCard();
        initNameEntry();
    }


    public void initUnitAbilities(){
        unit_ability = new DOLstring[49];
        for (int i = 0; i < unit_ability.length; i++){
            unit_ability[i] = new DOLstring();
        }

        unit_ability[0].text_offset = 0x0030c9c0;
        unit_ability[0].pointers = new long[] {0x002ca140};
        unit_ability[1].text_offset = 0x0030c9c8;
        unit_ability[1].pointers = new long[] {0x002ca144 };
        unit_ability[2].text_offset = 0x0030c9d0;
        unit_ability[2].pointers = new long[] {0x002ca148 };
        unit_ability[3].text_offset = 0x002b9d20;
        unit_ability[3].pointers = new long[] {0x002ca14c };
        unit_ability[4].text_offset = 0x002b9d2c;
        unit_ability[4].pointers = new long[] {0x002ca150 };

        unit_ability[5].text_offset = 0x0030c9d8;
        unit_ability[5].pointers = new long[] {0x002ca154 };
        unit_ability[6].text_offset = 0x0030c9e0;
        unit_ability[6].pointers = new long[] {0x002ca158 };
        unit_ability[7].text_offset = 0x0030c9e8;
        unit_ability[7].pointers = new long[] {0x002ca15c };
        unit_ability[8].text_offset = 0x002b9d38;
        unit_ability[8].pointers = new long[] {0x002ca160 };
        unit_ability[9].text_offset = 0x002b9d50;
        unit_ability[9].pointers = new long[] {0x002ca164 };

        unit_ability[10].text_offset = 0x002b9d64;
        unit_ability[10].pointers = new long[] {0x002ca168 };
        unit_ability[11].text_offset = 0x002b9d70;
        unit_ability[11].pointers = new long[] {0x002ca16c };
        unit_ability[12].text_offset = 0x002b9d80;
        unit_ability[12].pointers = new long[] {0x002ca170 };
        unit_ability[13].text_offset = 0x002b9d90;
        unit_ability[13].pointers = new long[] {0x002ca174 };
        unit_ability[14].text_offset = 0x002b9da0;
        unit_ability[14].pointers = new long[] {0x002ca178 };

        unit_ability[15].text_offset = 0x002b9db0;
        unit_ability[15].pointers = new long[] {0x002ca17c };
        unit_ability[16].text_offset = 0x002b9dbc;
        unit_ability[16].pointers = new long[] {0x002ca180 };
        unit_ability[17].text_offset = 0x002b9dc8;
        unit_ability[17].pointers = new long[] {0x002ca184 };
        unit_ability[18].text_offset = 0x002b9dd4;
        unit_ability[18].pointers = new long[] {0x002ca188 };
        unit_ability[19].text_offset = 0x002b9de0;
        unit_ability[19].pointers = new long[] {0x002ca18c };

        unit_ability[20].text_offset = 0x002b9dec;
        unit_ability[20].pointers = new long[] {0x002ca190 };
        unit_ability[21].text_offset = 0x002b9df8;
        unit_ability[21].pointers = new long[] {0x002ca194 };
        unit_ability[22].text_offset = 0x002b9e08;
        unit_ability[22].pointers = new long[] {0x002ca198 };
        unit_ability[23].text_offset = 0x002b9e14;
        unit_ability[23].pointers = new long[] {0x002ca19c };
        unit_ability[24].text_offset = 0x002b9e20;
        unit_ability[24].pointers = new long[] {0x002ca1a0 };

        unit_ability[25].text_offset = 0x002b9e30;
        unit_ability[25].pointers = new long[] {0x002ca1a4 };
        unit_ability[26].text_offset = 0x002b9e44;
        unit_ability[26].pointers = new long[] {0x002ca1a8 };
        unit_ability[27].text_offset = 0x002b9e74;
        unit_ability[27].pointers = new long[] {0x002ca1ac };
        unit_ability[28].text_offset = 0x002b9eb4;
        unit_ability[28].pointers = new long[] {0x002ca1b0 };
        unit_ability[29].text_offset = 0x002b9f18;
        unit_ability[29].pointers = new long[] {0x002ca1b4 };

        unit_ability[30].text_offset = 0x002b9f4c;
        unit_ability[30].pointers = new long[] {0x002ca1b8 };
        unit_ability[31].text_offset = 0x002b9fac;
        unit_ability[31].pointers = new long[] {0x002ca1bc };
        unit_ability[32].text_offset = 0x002ba014;
        unit_ability[32].pointers = new long[] {0x002ca1c0 };
        unit_ability[33].text_offset = 0x002ba098;
        unit_ability[33].pointers = new long[] {0x002ca1c4, 0x002ca1c8, 0x002ca1cc };
        unit_ability[34].text_offset = 0x002ba0dc;
        unit_ability[34].pointers = new long[] {0x002ca1d0 };

        unit_ability[35].text_offset = 0x002ba100;
        unit_ability[35].pointers = new long[] {0x002ca1d4 };
        unit_ability[36].text_offset = 0x002ba15c;
        unit_ability[36].pointers = new long[] {0x002ca1d8 };
        unit_ability[37].text_offset = 0x002ba1b8;
        unit_ability[37].pointers = new long[] {0x002ca1dc };
        unit_ability[38].text_offset = 0x002ba214;
        unit_ability[38].pointers = new long[] {0x002ca1e0 };
        unit_ability[39].text_offset = 0x002ba270;
        unit_ability[39].pointers = new long[] {0x002ca1e4 };

        unit_ability[40].text_offset = 0x002ba2e0;
        unit_ability[40].pointers = new long[] {0x002ca1e8 };
        unit_ability[41].text_offset = 0x002ba350;
        unit_ability[41].pointers = new long[] {0x002ca1ec };
        unit_ability[42].text_offset = 0x002ba3c0;
        unit_ability[42].pointers = new long[] {0x002ca1f0 };
        unit_ability[43].text_offset = 0x002ba3f8;
        unit_ability[43].pointers = new long[] {0x002ca1f4 };
        unit_ability[44].text_offset = 0x002ba430;
        unit_ability[44].pointers = new long[] {0x002ca1f8 };

        unit_ability[45].text_offset = 0x002ba468;
        unit_ability[45].pointers = new long[] {0x002ca1fc };
        unit_ability[46].text_offset = 0x002ba4ac;
        unit_ability[46].pointers = new long[] {0x002ca200 };
        unit_ability[47].text_offset = 0x002ba530;
        unit_ability[47].pointers = new long[] {0x002ca204 };
        unit_ability[48].text_offset = 0x002ba5ac;
        unit_ability[48].pointers = new long[] {0x002ca208, 0x002ca20c };
    }


    public void initPilotSkills(){
        pilot_skill = new DOLstring[19];
        for (int i = 0; i < pilot_skill.length; i++){
            pilot_skill[i] = new DOLstring();
        }

        pilot_skill[0].text_offset = 0x002ba694;
        pilot_skill[0].pointers = new long[] {0x002ca3d8};
        pilot_skill[1].text_offset = 0x002ba6a4;
        pilot_skill[1].pointers = new long[] {0x002ca3dc};
        pilot_skill[2].text_offset = 0x0030ca28;
        pilot_skill[2].pointers = new long[] {0x002ca3e0};
        pilot_skill[3].text_offset = 0x002ba6b0;
        pilot_skill[3].pointers = new long[] {0x002ca3e4};
        pilot_skill[4].text_offset = 0x0030ca30;
        pilot_skill[4].pointers = new long[] {0x002ca3e8, 0x002ca3ec};

        pilot_skill[5].text_offset = 0x0030ca38;
        pilot_skill[5].pointers = new long[] {0x002ca3f0};
        pilot_skill[6].text_offset = 0x0030ca40;
        pilot_skill[6].pointers = new long[] {0x002ca3f4};
        pilot_skill[7].text_offset = 0x002ba6c0;
        pilot_skill[7].pointers = new long[] {0x002ca3f8};
        pilot_skill[8].text_offset = 0x002ba6cc;
        pilot_skill[8].pointers = new long[] {0x002ca3fc};
        pilot_skill[9].text_offset = 0x002ba6e0;
        pilot_skill[9].pointers = new long[] {0x002ca400};

        pilot_skill[10].text_offset = 0x002ba6ec;
        pilot_skill[10].pointers = new long[] {0x002ca404, 0x002ca408};
        pilot_skill[11].text_offset = 0x002ba754;
        pilot_skill[11].pointers = new long[] {0x002ca40c};
        pilot_skill[12].text_offset = 0x002ba7b4;
        pilot_skill[12].pointers = new long[] {0x002ca410};
        pilot_skill[13].text_offset = 0x002ba820;
        pilot_skill[13].pointers = new long[] {0x002ca414, 0x002ca418};
        pilot_skill[14].text_offset = 0x002ba858;
        pilot_skill[14].pointers = new long[] {0x002ca41c};

        pilot_skill[15].text_offset = 0x002ba8b4;
        pilot_skill[15].pointers = new long[] {0x002ca420};
        pilot_skill[16].text_offset = 0x002ba8f8;
        pilot_skill[16].pointers = new long[] {0x002ca424};
        pilot_skill[17].text_offset = 0x002ba95c;
        pilot_skill[17].pointers = new long[] {0x002ca428};
        pilot_skill[18].text_offset = 0x002ba99c;
        pilot_skill[18].pointers = new long[] {0x002ca42c};
    }


    public void initFUBs(){
        fub = new DOLstring[13];
        for (int i = 0; i < fub.length; i++){
            fub[i] = new DOLstring();
        }

        fub[0].text_offset = 0x002ba9e8;
        fub[0].pointers = new long[] {0x002ca5a4};
        fub[1].text_offset = 0x002ba9fc;
        fub[1].pointers = new long[] {0x002ca5a8};
        fub[2].text_offset = 0x002baa10;
        fub[2].pointers = new long[] {0x002ca5ac, 0x002ca774};
        fub[3].text_offset = 0x002baa20;
        fub[3].pointers = new long[] {0x002ca5b0};
        fub[4].text_offset = 0x002baa2c;
        fub[4].pointers = new long[] {0x002ca5b4};

        fub[5].text_offset = 0x002baa3c;
        fub[5].pointers = new long[] {0x002ca5b8};
        fub[6].text_offset = 0x0030ca48;
        fub[6].pointers = new long[] {0x002ca5bc, 0x002ca778};
        fub[7].text_offset = 0x002baa4c;
        fub[7].pointers = new long[] {0x002ca760};
        fub[8].text_offset = 0x002baa58;
        fub[8].pointers = new long[] {0x002ca764};
        fub[9].text_offset = 0x002baa68;
        fub[9].pointers = new long[] {0x002ca768};

        fub[10].text_offset = 0x002baa7c;
        fub[10].pointers = new long[] {0x002ca76c};
        fub[11].text_offset = 0x002baa88;
        fub[11].pointers = new long[] {0x002ca770};
        fub[12].text_offset = 0x002c2c5c;
        fub[12].pointers = new long[] {0x002e7b5c, 0x002e81d0, 0x002e914c};
    }


    public void initTitles(){
        series = new DOLstring[24];
        for (int i = 0; i < series.length; i++){
            series[i] = new DOLstring();
        }

        series[0].text_offset = 0x002bd450;
        series[0].pointers = new long[] {0x002deb68};
        series[1].text_offset = 0x002bd464;
        series[1].pointers = new long[] {0x002deb6c, 0x002debdc};
        series[2].text_offset = 0x002bd478;
        series[2].pointers = new long[] {0x002deb70, 0x002debe4};
        series[3].text_offset = 0x002bd490;
        series[3].pointers = new long[] {0x002deb74, 0x002debec};
        series[4].text_offset = 0x002bd4a8;
        series[4].pointers = new long[] {0x002deb78};

        series[5].text_offset = 0x002bd4bc;
        series[5].pointers = new long[] {0x002deb7c};
        series[6].text_offset = 0x002bd4ec;
        series[6].pointers = new long[] {0x002deb80};
        series[7].text_offset = 0x002bd510;
        series[7].pointers = new long[] {0x002deb84};
        series[8].text_offset = 0x002bd524;
        series[8].pointers = new long[] {0x002deb88};
        series[9].text_offset = 0x002bd53c;
        series[9].pointers = new long[] {0x002deb8c};

        series[10].text_offset = 0x002bd55c;
        series[10].pointers = new long[] {0x002deb90};
        series[11].text_offset = 0x002bd570;
        series[11].pointers = new long[] {0x002deb94};
        series[12].text_offset = 0x002bd58c;
        series[12].pointers = new long[] {0x002deb98};
        series[13].text_offset = 0x002bd5a0;
        series[13].pointers = new long[] {0x002deb9c};
        series[14].text_offset = 0x002bd5bc;
        series[14].pointers = new long[] {0x002deba0, 0x002debf8};

        series[15].text_offset = 0x002bd5d4;
        series[15].pointers = new long[] {0x002deba4};
        series[16].text_offset = 0x002bd5ec;
        series[16].pointers = new long[] {0x002deba8};
        series[17].text_offset = 0x002bd610;
        series[17].pointers = new long[] {0x002debac};
        series[18].text_offset = 0x002bd620;
        series[18].pointers = new long[] {0x002debb0};
        series[19].text_offset = 0x002bd638;
        series[19].pointers = new long[] {0x002debb4};

        series[20].text_offset = 0x002bd650;
        series[20].pointers = new long[] {0x002debb8};
        series[21].text_offset = 0x0030d1e0;
        series[21].pointers = new long[] {0x002debbc};
        series[22].text_offset = 0x0030d1e8;
        series[22].pointers = new long[] {0x002debc0};
        series[23].text_offset = 0x0030d1f0;
        series[23].pointers = new long[] {0x002debc4};
    }


    public void initBGMs(){
        bgm = new DOLstring[53];
        for (int i = 0; i < bgm.length; i++){
            bgm[i] = new DOLstring();
        }

        bgm[0].text_offset = 0x002bd664;
        bgm[0].pointers = new long[] {0x002debc8};
        bgm[1].text_offset = 0x002bd67c;
        bgm[1].pointers = new long[] {0x002debcc};
        bgm[2].text_offset = 0x002bd68c;
        bgm[2].pointers = new long[] {0x002debd0};
        bgm[3].text_offset = 0x002bd69c;
        bgm[3].pointers = new long[] {0x002debd4};
        bgm[4].text_offset = 0x002bd6ac;
        bgm[4].pointers = new long[] {0x002debd8};

        bgm[5].text_offset = 0x002bd6bc;
        bgm[5].pointers = new long[] {0x002debe0};
        bgm[6].text_offset = 0x002bd6d0;
        bgm[6].pointers = new long[] {0x002debe8};
        bgm[7].text_offset = 0x002bd6dc;
        bgm[7].pointers = new long[] {0x002debf0};
        bgm[8].text_offset = 0x002bd6f4;
        bgm[8].pointers = new long[] {0x002debf4};
        bgm[9].text_offset = 0x002bd70c;
        bgm[9].pointers = new long[] {0x002debfc};

        bgm[10].text_offset = 0x002bd720;
        bgm[10].pointers = new long[] {0x002dec00};
        bgm[11].text_offset = 0x002bd730;
        bgm[11].pointers = new long[] {0x002dec04};
        bgm[12].text_offset = 0x002bd740;
        bgm[12].pointers = new long[] {0x002dec08};
        bgm[13].text_offset = 0x002bd74c;
        bgm[13].pointers = new long[] {0x002dec0c};
        bgm[14].text_offset = 0x0030d1f8;
        bgm[14].pointers = new long[] {0x002dec10};

        bgm[15].text_offset = 0x002bd75c;
        bgm[15].pointers = new long[] {0x002dec14};
        bgm[16].text_offset = 0x0030d200;
        bgm[16].pointers = new long[] {0x002dec18};
        bgm[17].text_offset = 0x002bd768;
        bgm[17].pointers = new long[] {0x002dec1c};
        bgm[18].text_offset = 0x002bd774;
        bgm[18].pointers = new long[] {0x002dec20};
        bgm[19].text_offset = 0x002bd788;
        bgm[19].pointers = new long[] {0x002dec24};

        bgm[20].text_offset = 0x002bd798;
        bgm[20].pointers = new long[] {0x002dec28};
        bgm[21].text_offset = 0x002bd7a8;
        bgm[21].pointers = new long[] {0x002dec2c};
        bgm[22].text_offset = 0x002bd7bc;
        bgm[22].pointers = new long[] {0x002dec30};
        bgm[23].text_offset = 0x002bd7dc;
        bgm[23].pointers = new long[] {0x002dec34};
        bgm[24].text_offset = 0x002bd7e8;
        bgm[24].pointers = new long[] {0x002dec38};

        bgm[25].text_offset = 0x002bd7fc;
        bgm[25].pointers = new long[] {0x002dec3c};
        bgm[26].text_offset = 0x002bd814;
        bgm[26].pointers = new long[] {0x002dec40};
        bgm[27].text_offset = 0x002bd828;
        bgm[27].pointers = new long[] {0x002dec44};
        bgm[28].text_offset = 0x002bd850;
        bgm[28].pointers = new long[] {0x002dec48};
        bgm[29].text_offset = 0x002bd86c;
        bgm[29].pointers = new long[] {0x002dec4c};

        bgm[30].text_offset = 0x002bd87c;
        bgm[30].pointers = new long[] {0x002dec50};
        bgm[31].text_offset = 0x002bd88c;
        bgm[31].pointers = new long[] {0x002dec54};
        bgm[32].text_offset = 0x002bd89c;
        bgm[32].pointers = new long[] {0x002dec58};
        bgm[33].text_offset = 0x002bd8c8;
        bgm[33].pointers = new long[] {0x002dec5c};
        bgm[34].text_offset = 0x002bd8fc;
        bgm[34].pointers = new long[] {0x002dec60};

        bgm[35].text_offset = 0x002bd918;
        bgm[35].pointers = new long[] {0x002dec64};
        bgm[36].text_offset = 0x002bd930;
        bgm[36].pointers = new long[] {0x002dec68};
        bgm[37].text_offset = 0x0030d208;
        bgm[37].pointers = new long[] {0x002dec6c};
        bgm[38].text_offset = 0x002bd954;
        bgm[38].pointers = new long[] {0x002dec70};
        bgm[39].text_offset = 0x002bd964;
        bgm[39].pointers = new long[] {0x002dec74};

        bgm[40].text_offset = 0x002bd970;
        bgm[40].pointers = new long[] {0x002dec78};
        bgm[41].text_offset = 0x002bd97c;
        bgm[41].pointers = new long[] {0x002dec7c};
        bgm[42].text_offset = 0x002bd98c;
        bgm[42].pointers = new long[] {0x002dec80};
        bgm[43].text_offset = 0x002bd99c;
        bgm[43].pointers = new long[] {0x002dec84};
        bgm[44].text_offset = 0x002bd9a8;
        bgm[44].pointers = new long[] {0x002dec88};

        bgm[45].text_offset = 0x0030d210;
        bgm[45].pointers = new long[] {0x002dec8c};
        bgm[46].text_offset = 0x002bd9bc;
        bgm[46].pointers = new long[] {0x002dec90};
        bgm[47].text_offset = 0x002bd9c8;
        bgm[47].pointers = new long[] {0x002dec94};
        bgm[48].text_offset = 0x002bd9d8;
        bgm[48].pointers = new long[] {0x002dec98};
        bgm[49].text_offset = 0x002bda08;
        bgm[49].pointers = new long[] {0x002dec9c};

        bgm[50].text_offset = 0x0030d218;
        bgm[50].pointers = new long[] {0x002deca0};
        bgm[51].text_offset = 0x002bda14;
        bgm[51].pointers = new long[] {0x002deca4};
        bgm[52].text_offset = 0x002bda24;
        bgm[52].pointers = new long[] {0x002deca8};
    }


    public void initSearchMenu(){
        search = new DOLstring[30];
        for (int i = 0; i < search.length; i++){
            search[i] = new DOLstring();
        }

        search[0].text_offset = 0x0030cdd4;
        search[0].pointers = new long[] {0x002d7078, 0x002d7160};
        search[1].text_offset = 0x0030cddc;
        search[1].pointers = new long[] {0x002d707c, 0x002d7164};
        search[2].text_offset = 0x0030cde4;
        search[2].pointers = new long[] {0x002d7080, 0x002d7168};
        search[3].text_offset = 0x0030cdec;
        search[3].pointers = new long[] {0x002d7084, 0x002d716c};
        search[4].text_offset = 0x0030cdf4;
        search[4].pointers = new long[] {0x002d7088, 0x002d7170};

        search[5].text_offset = 0x0030cdfc;
        search[5].pointers = new long[] {0x002d708c, 0x002d7174};
        search[6].text_offset = 0x0030ce04;
        search[6].pointers = new long[] {0x002d7090, 0x002d7178};
        search[7].text_offset = 0x0030ce0c;
        search[7].pointers = new long[] {0x002d7094, 0x002d717c};
        search[8].text_offset = 0x0030ce14;
        search[8].pointers = new long[] {0x002d7098, 0x002d7180};
        search[9].text_offset = 0x0030ce1c;
        search[9].pointers = new long[] {0x002d709c, 0x002d7184};

        search[10].text_offset = 0x002bda34;
        search[10].pointers = new long[] {0x002e0be8};
        search[11].text_offset = 0x002bda60;
        search[11].pointers = new long[] {0x002e0bec};
        search[12].text_offset = 0x002bda8c;
        search[12].pointers = new long[] {0x002e0bf0};
        search[13].text_offset = 0x002bdab8;
        search[13].pointers = new long[] {0x002e0bf4};
        search[14].text_offset = 0x002bdae4;
        search[14].pointers = new long[] {0x002e0bf8};

        search[15].text_offset = 0x002bdb10;
        search[15].pointers = new long[] {0x002e0bfc};
        search[16].text_offset = 0x002bdb3c;
        search[16].pointers = new long[] {0x002e0c00};
        search[17].text_offset = 0x002bdb68;
        search[17].pointers = new long[] {0x002e0c04};
        search[18].text_offset = 0x002bdb98;
        search[18].pointers = new long[] {0x002e0c08};
        search[19].text_offset = 0x002bdbc4;
        search[19].pointers = new long[] {0x002e0c0c};

        search[20].text_offset = 0x002bdbf4;
        search[20].pointers = new long[] {0x002e0c10};
        search[21].text_offset = 0x002bdc18;
        search[21].pointers = new long[] {0x002e0c14};
        search[22].text_offset = 0x002bdc3c;
        search[22].pointers = new long[] {0x002e0c18};
        search[23].text_offset = 0x002bdc60;
        search[23].pointers = new long[] {0x002e0c1c};
        search[24].text_offset = 0x002bdc84;
        search[24].pointers = new long[] {0x002e0c20};

        search[25].text_offset = 0x002bdca8;
        search[25].pointers = new long[] {0x002e0c24};
        search[26].text_offset = 0x002bdccc;
        search[26].pointers = new long[] {0x002e0c28};
        search[27].text_offset = 0x002bdcf0;
        search[27].pointers = new long[] {0x002e0c2c};
        search[28].text_offset = 0x002bdd18;
        search[28].pointers = new long[] {0x002e0c30};
        search[29].text_offset = 0x002bdd3c;
        search[29].pointers = new long[] {0x002e0c34};
    }


    public void initOptionMenu(){
        option = new DOLstring[12];
        for (int i = 0; i < option.length; i++){
            option[i] = new DOLstring();
        }

        option[0].text_offset = 0x002c06e0;
        option[0].pointers = new long[] {0x002e35a4};
        option[1].text_offset = 0x002c0700;
        option[1].pointers = new long[] {0x002e35a8};
        option[2].text_offset = 0x002c0720;
        option[2].pointers = new long[] {0x002e35ac};
        option[3].text_offset = 0x002c0750;
        option[3].pointers = new long[] {0x002e35b0};
        option[4].text_offset = 0x002c0784;
        option[4].pointers = new long[] {0x002e35b4};

        option[5].text_offset = 0x002c07a8;
        option[5].pointers = new long[] {0x002e35b8};
        option[6].text_offset = 0x002c07cc;
        option[6].pointers = new long[] {0x002e35bc};
        option[7].text_offset = 0x002c07f8;
        option[7].pointers = new long[] {0x002e35c0};
        option[8].text_offset = 0x002c0828;
        option[8].pointers = new long[] {0x002e35c4};
        option[9].text_offset = 0x002c0850;
        option[9].pointers = new long[] {0x002e35c8};

        option[10].text_offset = 0x002c0878;
        option[10].pointers = new long[] {0x002e35cc};
        option[11].text_offset = 0x002c08b4;
        option[11].pointers = new long[] {0x002e35d0};
    }


    public void initScenarioMenu(){
        scenario = new DOLstring[7];
        for (int i = 0; i < scenario.length; i++){
            scenario[i] = new DOLstring();
        }

        scenario[0].text_offset = 0x002c08e8;
        scenario[0].pointers = new long[] {0x002e3738};
        scenario[1].text_offset = 0x002c090c;
        scenario[1].pointers = new long[] {0x002e3758};
        scenario[2].text_offset = 0x002c093c;
        scenario[2].pointers = new long[] {0x002e3768};
        scenario[3].text_offset = 0x002c0958;
        scenario[3].pointers = new long[] {0x002e3788};
        scenario[4].text_offset = 0x002c0980;
        scenario[4].pointers = new long[] {0x002e3798, 0x002e37c8, 0x002e37f8};

        scenario[5].text_offset = 0x002c0994;
        scenario[5].pointers = new long[] {0x002e37b8};
        scenario[6].text_offset = 0x002c09ac;
        scenario[6].pointers = new long[] {0x002e37e8};
    }


    public void initCaptureMenu(){
        capture = new DOLstring[6];
        for (int i = 0; i < capture.length; i++){
            capture[i] = new DOLstring();
        }

        capture[0].text_offset = 0x0030ce74;
        capture[0].pointers = new long[] {0x002d89e8};
        capture[1].text_offset = 0x002bb74c;
        capture[1].pointers = new long[] {0x002d89ec};
        capture[2].text_offset = 0x002bb738;
        capture[2].pointers = new long[] {0x002d89f0, 0x002d89f8, 0x002d8a00, 0x002d8a08};
        capture[3].text_offset = 0x002bb758;
        capture[3].pointers = new long[] {0x002d89f4};
        capture[4].text_offset = 0x002bb778;
        capture[4].pointers = new long[] {0x002d89fc};

        capture[5].text_offset = 0x002bb79c;
        capture[5].pointers = new long[] {0x002d8a04};
    }


    public void initDeployMenu(){
        deploy = new DOLstring[4];
        for (int i = 0; i < deploy.length; i++){
            deploy[i] = new DOLstring();
        }

        deploy[0].text_offset = 0x002bb7c8;
        deploy[0].pointers = new long[] {0x002d8d6c};
        deploy[1].text_offset = 0x002bb7dc;
        deploy[1].pointers = new long[] {0x002d8d7c};
        deploy[2].text_offset = 0x002bb7ec;
        deploy[2].pointers = new long[] {0x002d8d9c};
        deploy[3].text_offset = 0x002bb80c;
        deploy[3].pointers = new long[] {0x002d8e4c};
    }


    public void initExtraMenu(){
        extra = new DOLstring[13];
        for (int i = 0; i < extra.length; i++){
            extra[i] = new DOLstring();
        }

        extra[0].text_offset = 0x002bb838;
        extra[0].pointers = new long[] {0x002d9380};
        extra[1].text_offset = 0x002c2be8;
        extra[1].pointers = new long[] {0x002e6a68};
        extra[2].text_offset = 0x002c2bf4;
        extra[2].pointers = new long[] {0x002e6a78, 0x002e71ac, 0x002e8914, 0x002e8c48};
        extra[3].text_offset = 0x002c2c08;
        extra[3].pointers = new long[] {0x002e719c};
        extra[4].text_offset = 0x002c2cec;
        extra[4].pointers = new long[] {0x002e8904, 0x002e8c38};

        extra[5].text_offset = 0x0030ce24;
        extra[5].pointers = new long[] {0x002d75cc, 0x002d86bc};
        extra[6].text_offset = 0x0030ce28;
        extra[6].pointers = new long[] {0x002d75d0, 0x002d86c0};
        extra[7].text_offset = 0x0030ce2c;
        extra[7].pointers = new long[] {0x002d75d4, 0x002d86c4};
        extra[8].text_offset = 0x0030ce30;
        extra[8].pointers = new long[] {0x002d75d8, 0x002d86c8};
        extra[9].text_offset = 0x0030ce34;
        extra[9].pointers = new long[] {0x002d75dc, 0x002d86cc};

        extra[10].text_offset = 0x0030ce64;
        extra[10].pointers = new long[] {0x002d8728};
        extra[11].text_offset = 0x0030ce6c;
        extra[11].pointers = new long[] {0x002d8738};
        extra[12].text_offset = 0x0030da28;
        extra[12].pointers = new long[] {0x002e9b90};

    }


    public void initLayzner(){
        layzner = new DOLstring[2];
        for (int i = 0; i < layzner.length; i++){
            layzner[i] = new DOLstring();
        }

        layzner[0].text_offset = 0x002bb848;
        layzner[0].pointers = new long[] {0x002d9468};
        layzner[1].text_offset = 0x002bb858;
        layzner[1].pointers = new long[] {0x002d9478};
    }


    public void initWinConditions(){
        win = new DOLstring[28];
        for (int i = 0; i < win.length; i++){
            win[i] = new DOLstring();
        }

        win[0].text_offset = 0x002bdd64;
        win[0].pointers = new long[] {0x002e11e4, 0x002e1360};
        win[1].text_offset = 0x002bdd70;
        win[1].pointers = new long[] {0x002e11e8};
        win[2].text_offset = 0x002bdd98;
        win[2].pointers = new long[] {0x002e11ec};
        win[3].text_offset = 0x002bddb8;
        win[3].pointers = new long[] {0x002e11f0};
        win[4].text_offset = 0x002bdddc;
        win[4].pointers = new long[] {0x002e11f4};

        win[5].text_offset = 0x002bddf8;
        win[5].pointers = new long[] {0x002e11f8};
        win[6].text_offset = 0x002bde08;
        win[6].pointers = new long[] {0x002e11fc};
        win[7].text_offset = 0x002bde2c;
        win[7].pointers = new long[] {0x002e1200};
        win[8].text_offset = 0x002bde50;
        win[8].pointers = new long[] {0x002e1204};
        win[9].text_offset = 0x002bde74;
        win[9].pointers = new long[] {0x002e1208};

        win[10].text_offset = 0x002bde84;
        win[10].pointers = new long[] {0x002e120c};
        win[11].text_offset = 0x002bdeb8;
        win[11].pointers = new long[] {0x002e1210};
        win[12].text_offset = 0x002bded8;
        win[12].pointers = new long[] {0x002e1214};
        win[13].text_offset = 0x002bdeec;
        win[13].pointers = new long[] {0x002e1218};
        win[14].text_offset = 0x002bdf00;
        win[14].pointers = new long[] {0x002e121c};

        win[15].text_offset = 0x002bdf0c;
        win[15].pointers = new long[] {0x002e1220};
        win[16].text_offset = 0x002bdf34;
        win[16].pointers = new long[] {0x002e1224};
        win[17].text_offset = 0x002bdf44;
        win[17].pointers = new long[] {0x002e1228};
        win[18].text_offset = 0x002bdf5c;
        win[18].pointers = new long[] {0x002e122c};
        win[19].text_offset = 0x002bdf70;
        win[19].pointers = new long[] {0x002e1230};

        win[20].text_offset = 0x002bdfac;
        win[20].pointers = new long[] {0x002e1234};
        win[21].text_offset = 0x002bdfc8;
        win[21].pointers = new long[] {0x002e1238, 0x002e132c};
        win[22].text_offset = 0x002bdfd8;
        win[22].pointers = new long[] {0x002e123c};
        win[23].text_offset = 0x002bdff0;
        win[23].pointers = new long[] {0x002e1240};
        win[24].text_offset = 0x002be010;
        win[24].pointers = new long[] {0x002e1244};

        win[25].text_offset = 0x002be030;
        win[25].pointers = new long[] {0x002e1248};
        win[26].text_offset = 0x002be05c;
        win[26].pointers = new long[] {0x002e124c};
        win[27].text_offset = 0x002be080;
        win[27].pointers = new long[] {0x002e1250};
    }


    public void initLoseConditions(){
        lose = new DOLstring[50];
        for (int i = 0; i < lose.length; i++){
            lose[i] = new DOLstring();
        }

        lose[0].text_offset = 0x002be0a0;
        lose[0].pointers = new long[] {0x002e12b0};
        lose[1].text_offset = 0x002be0b0;
        lose[1].pointers = new long[] {0x002e12b4};
        lose[2].text_offset = 0x002be0bc;
        lose[2].pointers = new long[] {0x002e12b8};
        lose[3].text_offset = 0x002be0cc;
        lose[3].pointers = new long[] {0x002e12bc};
        lose[4].text_offset = 0x002be0dc;
        lose[4].pointers = new long[] {0x002e12c0};

        lose[5].text_offset = 0x002be0ec;
        lose[5].pointers = new long[] {0x002e12c4};
        lose[6].text_offset = 0x002be0fc;
        lose[6].pointers = new long[] {0x002e12c8};
        lose[7].text_offset = 0x002be10c;
        lose[7].pointers = new long[] {0x002e12cc, 0x002e1324};
        lose[8].text_offset = 0x002be120;
        lose[8].pointers = new long[] {0x002e12d0};
        lose[9].text_offset = 0x002be134;
        lose[9].pointers = new long[] {0x002e12d4};

        lose[10].text_offset = 0x002be144;
        lose[10].pointers = new long[] {0x002e12d8};
        lose[11].text_offset = 0x002be154;
        lose[11].pointers = new long[] {0x002e12dc};
        lose[12].text_offset = 0x002be164;
        lose[12].pointers = new long[] {0x002e12e0};
        lose[13].text_offset = 0x002be174;
        lose[13].pointers = new long[] {0x002e12e4};
        lose[14].text_offset = 0x002be18c;
        lose[14].pointers = new long[] {0x002e12e8};

        lose[15].text_offset = 0x002be1a4;
        lose[15].pointers = new long[] {0x002e12ec};
        lose[16].text_offset = 0x002be1bc;
        lose[16].pointers = new long[] {0x002e12f0};
        lose[17].text_offset = 0x002be1d0;
        lose[17].pointers = new long[] {0x002e12f4};
        lose[18].text_offset = 0x002be1e4;
        lose[18].pointers = new long[] {0x002e12f8};
        lose[19].text_offset = 0x002be1f4;
        lose[19].pointers = new long[] {0x002e12fc};

        lose[20].text_offset = 0x002be204;
        lose[20].pointers = new long[] {0x002e1300};
        lose[21].text_offset = 0x002be218;
        lose[21].pointers = new long[] {0x002e1304};
        lose[22].text_offset = 0x002be234;
        lose[22].pointers = new long[] {0x002e1308};
        lose[23].text_offset = 0x002be24c;
        lose[23].pointers = new long[] {0x002e130c};
        lose[24].text_offset = 0x002be268;
        lose[24].pointers = new long[] {0x002e1310};

        lose[25].text_offset = 0x002be27c;
        lose[25].pointers = new long[] {0x002e1314};
        lose[26].text_offset = 0x002be290;
        lose[26].pointers = new long[] {0x002e1318};
        lose[27].text_offset = 0x002be2a0;
        lose[27].pointers = new long[] {0x002e131c};
        lose[28].text_offset = 0x002be2b0;
        lose[28].pointers = new long[] {0x002e1320};
        lose[29].text_offset = 0x002be2d8;
        lose[29].pointers = new long[] {0x002e1328};

        lose[30].text_offset = 0x002be2e8;
        lose[30].pointers = new long[] {0x002e1330};
        lose[31].text_offset = 0x002be2f8;
        lose[31].pointers = new long[] {0x002e1334};
        lose[32].text_offset = 0x002be308;
        lose[32].pointers = new long[] {0x002e1338};
        lose[33].text_offset = 0x002be320;
        lose[33].pointers = new long[] {0x002e133c};
        lose[34].text_offset = 0x002be33c;
        lose[34].pointers = new long[] {0x002e1340};

        lose[35].text_offset = 0x002be350;
        lose[35].pointers = new long[] {0x002e1344};
        lose[36].text_offset = 0x002be368;
        lose[36].pointers = new long[] {0x002e1348};
        lose[37].text_offset = 0x002be37c;
        lose[37].pointers = new long[] {0x002e134c};
        lose[38].text_offset = 0x002be394;
        lose[38].pointers = new long[] {0x002e1350};
        lose[39].text_offset = 0x002be3a4;
        lose[39].pointers = new long[] {0x002e1354};

        lose[40].text_offset = 0x002be3b4;
        lose[40].pointers = new long[] {0x002e1358};
        lose[41].text_offset = 0x002be3c4;
        lose[41].pointers = new long[] {0x002e135c};
        lose[42].text_offset = 0x002be3d4;
        lose[42].pointers = new long[] {0x002e1364};
        lose[43].text_offset = 0x002be3e8;
        lose[43].pointers = new long[] {0x002e1368};
        lose[44].text_offset = 0x002be3fc;
        lose[44].pointers = new long[] {0x002e136c};

        lose[45].text_offset = 0x002be424;
        lose[45].pointers = new long[] {0x002e1370};
        lose[46].text_offset = 0x002be438;
        lose[46].pointers = new long[] {0x002e1374};
        lose[47].text_offset = 0x002be44c;
        lose[47].pointers = new long[] {0x002e1378};
        lose[48].text_offset = 0x002be46c;
        lose[48].pointers = new long[] {0x002e137c};
        lose[49].text_offset = 0x002be480;
        lose[49].pointers = new long[] {0x002e1380};
    }


    public void initBlackScreen(){
        black_screen = new DOLstring[20];
        for (int i = 0; i < black_screen.length; i++){
            black_screen[i] = new DOLstring();
        }

        black_screen[0].text_offset = 0x002c03dc;
        black_screen[0].pointers = new long[] {0x002e267c};
        black_screen[1].text_offset = 0x002c03ec;
        black_screen[1].pointers = new long[] {0x002e2680};
        black_screen[2].text_offset = 0x002c0400;
        black_screen[2].pointers = new long[] {0x002e2688};
        black_screen[3].text_offset = 0x002c040c;
        black_screen[3].pointers = new long[] {0x002e268c};
        black_screen[4].text_offset = 0x002c0424;
        black_screen[4].pointers = new long[] {0x002e2690};

        black_screen[5].text_offset = 0x002c04e0;
        black_screen[5].pointers = new long[] {0x002e2698};
        black_screen[6].text_offset = 0x002c04f4;
        black_screen[6].pointers = new long[] {0x002e269c};
        black_screen[7].text_offset = 0x002c0508;
        black_screen[7].pointers = new long[] {0x002e26a0};
        black_screen[8].text_offset = 0x002c0524;
        black_screen[8].pointers = new long[] {0x002e26a8};
        black_screen[9].text_offset = 0x002c043c;
        black_screen[9].pointers = new long[] {0x0030c2c8};

        black_screen[10].text_offset = 0x002c0448;
        black_screen[10].pointers = new long[] {0x0030c2d0};
        black_screen[11].text_offset = 0x0030d404;
        black_screen[11].pointers = new long[] {0x0030c2d8};
        black_screen[12].text_offset = 0x002c0458;
        black_screen[12].pointers = new long[] {0x0030c2e0};
        black_screen[13].text_offset = 0x002c0464;
        black_screen[13].pointers = new long[] {0x0030c2e8};
        black_screen[14].text_offset = 0x002c0478;
        black_screen[14].pointers = new long[] {0x0030c2f0};

        black_screen[15].text_offset = 0x002c0484;
        black_screen[15].pointers = new long[] {0x0030c2f8};
        black_screen[16].text_offset = 0x002c0498;
        black_screen[16].pointers = new long[] {0x0030c300};
        black_screen[17].text_offset = 0x002c04ac;
        black_screen[17].pointers = new long[] {0x0030c308};
        black_screen[18].text_offset = 0x002c04c8;
        black_screen[18].pointers = new long[] {0x0030c310};
        black_screen[19].text_offset = 0x002c04d4;
        black_screen[19].pointers = new long[] {0x0030c318};
    }


    public void initOpening(){
        opening = new DOLstring[26];
        for (int i = 0; i < opening.length; i++){
            opening[i] = new DOLstring();
        }

        opening[0].text_offset = 0x002c4660;
        opening[0].pointers = new long[] {0x002ea798};
        opening[1].text_offset = 0x002c4674;
        opening[1].pointers = new long[] {0x002ea79c};
        opening[2].text_offset = 0x002c46a0;
        opening[2].pointers = new long[] {0x002ea7a0};
        opening[3].text_offset = 0x002c46c4;
        opening[3].pointers = new long[] {0x002ea7a8};
        opening[4].text_offset = 0x002c46f0;
        opening[4].pointers = new long[] {0x002ea7ac};

        opening[5].text_offset = 0x002c4724;
        opening[5].pointers = new long[] {0x002ea7b4};
        opening[6].text_offset = 0x002c4758;
        opening[6].pointers = new long[] {0x002ea7b8};
        opening[7].text_offset = 0x002c477c;
        opening[7].pointers = new long[] {0x002ea7bc};
        opening[8].text_offset = 0x002c47a4;
        opening[8].pointers = new long[] {0x002ea7c0};
        opening[9].text_offset = 0x002c47d0;
        opening[9].pointers = new long[] {0x002ea7c4};

        opening[10].text_offset = 0x002c4800;
        opening[10].pointers = new long[] {0x002ea7c8};
        opening[11].text_offset = 0x002c4824;
        opening[11].pointers = new long[] {0x002ea7d0};
        opening[12].text_offset = 0x002c4848;
        opening[12].pointers = new long[] {0x002ea7d4};
        opening[13].text_offset = 0x002c4878;
        opening[13].pointers = new long[] {0x002ea7d8};
        opening[14].text_offset = 0x002c48a8;
        opening[14].pointers = new long[] {0x002ea7dc};

        opening[15].text_offset = 0x002c48d8;
        opening[15].pointers = new long[] {0x002ea7e0};
        opening[16].text_offset = 0x002c48ec;
        opening[16].pointers = new long[] {0x002ea7e8};
        opening[17].text_offset = 0x002c491c;
        opening[17].pointers = new long[] {0x002ea7ec};
        opening[18].text_offset = 0x002c4944;
        opening[18].pointers = new long[] {0x002ea7f4};
        opening[19].text_offset = 0x002c4974;
        opening[19].pointers = new long[] {0x002ea7f8};

        opening[20].text_offset = 0x002c49a0;
        opening[20].pointers = new long[] {0x002ea7fc};
        opening[21].text_offset = 0x002c49d0;
        opening[21].pointers = new long[] {0x002ea800};
        opening[22].text_offset = 0x002c4a04;
        opening[22].pointers = new long[] {0x002ea804};
        opening[23].text_offset = 0x002c4a30;
        opening[23].pointers = new long[] {0x002ea808};
        opening[24].text_offset = 0x002c4a3c;
        opening[24].pointers = new long[] {0x002ea810};

        opening[25].text_offset = 0x002c4a64;
        opening[25].pointers = new long[] {0x002ea814};
    }


    public void initEnding(){
        ending = new DOLstring[13];
        for (int i = 0; i < ending.length; i++){
            ending[i] = new DOLstring();
        }

        ending[0].text_offset = 0x002c4a84;
        ending[0].pointers = new long[] {0x002ea818};
        ending[1].text_offset = 0x002c4a98;
        ending[1].pointers = new long[] {0x002ea81c};
        ending[2].text_offset = 0x002c4ab4;
        ending[2].pointers = new long[] {0x002ea820};
        ending[3].text_offset = 0x002c4ad0;
        ending[3].pointers = new long[] {0x002ea824};
        ending[4].text_offset = 0x002c4aec;
        ending[4].pointers = new long[] {0x002ea82c};

        ending[5].text_offset = 0x002c4b04;
        ending[5].pointers = new long[] {0x002ea830};
        ending[6].text_offset = 0x002c4b1c;
        ending[6].pointers = new long[] {0x002ea834};
        ending[7].text_offset = 0x002c4b3c;
        ending[7].pointers = new long[] {0x002ea838};
        ending[8].text_offset = 0x002c4b54;
        ending[8].pointers = new long[] {0x002ea840};
        ending[9].text_offset = 0x002c4b6c;
        ending[9].pointers = new long[] {0x002ea844};

        ending[10].text_offset = 0x002c4b88;
        ending[10].pointers = new long[] {0x002ea848};
        ending[11].text_offset = 0x002c6d44;
        ending[11].pointers = new long[] {0x002ef460};
        ending[12].text_offset = 0x002c6d6c;
        ending[12].pointers = new long[] {0x002ef468};
    }


    public void initStaff(){
        staff = new DOLstring[183];
        for (int i = 0; i < staff.length; i++){
            staff[i] = new DOLstring();
        }

        staff[0].text_offset = 0x002c4df8;
        staff[0].pointers = new long[] {0x002ee460};
        staff[1].text_offset = 0x002c4e08;
        staff[1].pointers = new long[] {0x002ee470};
        staff[2].text_offset = 0x002c4e14;
        staff[2].pointers = new long[] {0x002ee478};
        staff[3].text_offset = 0x002c4e28;
        staff[3].pointers = new long[] {0x002ee480};
        staff[4].text_offset = 0x0030dd0c;
        staff[4].pointers = new long[] {0x002ee490};

        staff[5].text_offset = 0x002c4e34;
        staff[5].pointers = new long[] {0x002ee4a0};
        staff[6].text_offset = 0x002c4e4c;
        staff[6].pointers = new long[] {0x002ee4b0};
        staff[7].text_offset = 0x002c4e5c;
        staff[7].pointers = new long[] {0x002ee4c0};
        staff[8].text_offset = 0x002c4e68;
        staff[8].pointers = new long[] {0x002ee4c8};
        staff[9].text_offset = 0x002c4e74;
        staff[9].pointers = new long[] {0x002ee4d8};

        staff[10].text_offset = 0x002c4e90;
        staff[10].pointers = new long[] {0x002ee4e0};
        staff[11].text_offset = 0x002c4e9c;
        staff[11].pointers = new long[] {0x002ee4f0};
        staff[12].text_offset = 0x002c4ebc;
        staff[12].pointers = new long[] {0x002ee500};
        staff[13].text_offset = 0x002c4ecc;
        staff[13].pointers = new long[] {0x002ee510};
        staff[14].text_offset = 0x002c4eec;
        staff[14].pointers = new long[] {0x002ee520, 0x002ee818};

        staff[15].text_offset = 0x002c4ef8;
        staff[15].pointers = new long[] {0x002ee530};
        staff[16].text_offset = 0x002c4f04;
        staff[16].pointers = new long[] {0x002ee540};
        staff[17].text_offset = 0x002c4f10;
        staff[17].pointers = new long[] {0x002ee550, 0x002ee590};
        staff[18].text_offset = 0x002c4f28;
        staff[18].pointers = new long[] {0x002ee558, 0x002ee598};
        staff[19].text_offset = 0x002c4f3c;
        staff[19].pointers = new long[] {0x002ee568};

        staff[20].text_offset = 0x002c4f48;
        staff[20].pointers = new long[] {0x002ee570};
        staff[21].text_offset = 0x002c4f54;
        staff[21].pointers = new long[] {0x002ee578};
        staff[22].text_offset = 0x002c4f60;
        staff[22].pointers = new long[] {0x002ee580};
        staff[23].text_offset = 0x002c4f6c;
        staff[23].pointers = new long[] {0x002ee5a8};
        staff[24].text_offset = 0x002c4f78;
        staff[24].pointers = new long[] {0x002ee5b0};

        staff[25].text_offset = 0x002c4f84;
        staff[25].pointers = new long[] {0x002ee5b8};
        staff[26].text_offset = 0x002c4f94;
        staff[26].pointers = new long[] {0x002ee5c0};
        staff[27].text_offset = 0x002c4fa0;
        staff[27].pointers = new long[] {0x002ee5d0, 0x002ee610};
        staff[28].text_offset = 0x002c4fb8;
        staff[28].pointers = new long[] {0x002ee5e0};
        staff[29].text_offset = 0x002c4fc4;
        staff[29].pointers = new long[] {0x002ee5e8};

        staff[30].text_offset = 0x002c4fd0;
        staff[30].pointers = new long[] {0x002ee5f0};
        staff[31].text_offset = 0x002c4fdc;
        staff[31].pointers = new long[] {0x002ee5f8};
        staff[32].text_offset = 0x002c4fe8;
        staff[32].pointers = new long[] {0x002ee600};
        staff[33].text_offset = 0x002c4ff4;
        staff[33].pointers = new long[] {0x002ee620};
        staff[34].text_offset = 0x002c5000;
        staff[34].pointers = new long[] {0x002ee628};

        staff[35].text_offset = 0x002c500c;
        staff[35].pointers = new long[] {0x002ee630};
        staff[36].text_offset = 0x002c501c;
        staff[36].pointers = new long[] {0x002ee638};
        staff[37].text_offset = 0x002c5028;
        staff[37].pointers = new long[] {0x002ee640};
        staff[38].text_offset = 0x002c5034;
        staff[38].pointers = new long[] {0x002ee648};
        staff[39].text_offset = 0x002c5040;
        staff[39].pointers = new long[] {0x002ee650};

        staff[40].text_offset = 0x002c504c;
        staff[40].pointers = new long[] {0x002ee658};
        staff[41].text_offset = 0x002c5058;
        staff[41].pointers = new long[] {0x002ee660};
        staff[42].text_offset = 0x002c5064;
        staff[42].pointers = new long[] {0x002ee668};
        staff[43].text_offset = 0x002c5070;
        staff[43].pointers = new long[] {0x002ee678, 0x002ee6b0};
        staff[44].text_offset = 0x002c5084;
        staff[44].pointers = new long[] {0x002ee688};

        staff[45].text_offset = 0x002c5090;
        staff[45].pointers = new long[] {0x002ee690};
        staff[46].text_offset = 0x002c509c;
        staff[46].pointers = new long[] {0x002ee698};
        staff[47].text_offset = 0x002c50a8;
        staff[47].pointers = new long[] {0x002ee6a0};
        staff[48].text_offset = 0x002c50b4;
        staff[48].pointers = new long[] {0x002ee6c0};
        staff[49].text_offset = 0x002c50c0;
        staff[49].pointers = new long[] {0x002ee6c8};

        staff[50].text_offset = 0x002c50cc;
        staff[50].pointers = new long[] {0x002ee6d0};
        staff[51].text_offset = 0x002c50d8;
        staff[51].pointers = new long[] {0x002ee6d8};
        staff[52].text_offset = 0x002c50e4;
        staff[52].pointers = new long[] {0x002ee6e0};
        staff[53].text_offset = 0x002c50f0;
        staff[53].pointers = new long[] {0x002ee6e8};
        staff[54].text_offset = 0x002c50fc;
        staff[54].pointers = new long[] {0x002ee6f0};

        staff[55].text_offset = 0x002c510c;
        staff[55].pointers = new long[] {0x002ee6f8};
        staff[56].text_offset = 0x002c5118;
        staff[56].pointers = new long[] {0x002ee700};
        staff[57].text_offset = 0x002c5124;
        staff[57].pointers = new long[] {0x002ee710};
        staff[58].text_offset = 0x002c513c;
        staff[58].pointers = new long[] {0x002ee720};
        staff[59].text_offset = 0x002c5148;
        staff[59].pointers = new long[] {0x002ee728};

        staff[60].text_offset = 0x002c5154;
        staff[60].pointers = new long[] {0x002ee738};
        staff[61].text_offset = 0x002c5160;
        staff[61].pointers = new long[] {0x002ee740};
        staff[62].text_offset = 0x002c516c;
        staff[62].pointers = new long[] {0x002ee748};
        staff[63].text_offset = 0x002c5178;
        staff[63].pointers = new long[] {0x002ee750};
        staff[64].text_offset = 0x002c5184;
        staff[64].pointers = new long[] {0x002ee760};

        staff[65].text_offset = 0x002c519c;
        staff[65].pointers = new long[] {0x002ee770};
        staff[66].text_offset = 0x002c51a8;
        staff[66].pointers = new long[] {0x002ee780};
        staff[67].text_offset = 0x002c51c0;
        staff[67].pointers = new long[] {0x002ee790};
        staff[68].text_offset = 0x002c51cc;
        staff[68].pointers = new long[] {0x002ee798};
        staff[69].text_offset = 0x002c51d8;
        staff[69].pointers = new long[] {0x002ee7a8};

        staff[70].text_offset = 0x002c51f8;
        staff[70].pointers = new long[] {0x002ee7b0};
        staff[71].text_offset = 0x002c5210;
        staff[71].pointers = new long[] {0x002ee7c0};
        staff[72].text_offset = 0x002c521c;
        staff[72].pointers = new long[] {0x002ee7c8};
        staff[73].text_offset = 0x002c522c;
        staff[73].pointers = new long[] {0x002ee7d8};
        staff[74].text_offset = 0x002c5238;
        staff[74].pointers = new long[] {0x002ee7e0};

        staff[75].text_offset = 0x002c5244;
        staff[75].pointers = new long[] {0x002ee7e8};
        staff[76].text_offset = 0x002c5250;
        staff[76].pointers = new long[] {0x002ee7f8};
        staff[77].text_offset = 0x002c5260;
        staff[77].pointers = new long[] {0x002ee808};
        staff[78].text_offset = 0x002c5278;
        staff[78].pointers = new long[] {0x002ee810};
        staff[79].text_offset = 0x002c5284;
        staff[79].pointers = new long[] {0x002ee828};

        staff[80].text_offset = 0x002c52a0;
        staff[80].pointers = new long[] {0x002ee838, 0x002ee9e8, 0x002eec18};
        staff[81].text_offset = 0x002c52b8;
        staff[81].pointers = new long[] {0x002ee840};
        staff[82].text_offset = 0x002c52c8;
        staff[82].pointers = new long[] {0x002ee850};
        staff[83].text_offset = 0x002c52ec;
        staff[83].pointers = new long[] {0x002ee860};
        staff[84].text_offset = 0x002c5308;
        staff[84].pointers = new long[] {0x002ee870};

        staff[85].text_offset = 0x002c531c;
        staff[85].pointers = new long[] {0x002ee880};
        staff[86].text_offset = 0x002c5328;
        staff[86].pointers = new long[] {0x002ee888};
        staff[87].text_offset = 0x002c5334;
        staff[87].pointers = new long[] {0x002ee898};
        staff[88].text_offset = 0x002c5340;
        staff[88].pointers = new long[] {0x002ee8a8, 0x002eec10};
        staff[89].text_offset = 0x002c5364;
        staff[89].pointers = new long[] {0x002ee8b8};

        staff[90].text_offset = 0x002c5370;
        staff[90].pointers = new long[] {0x002ee8c8};
        staff[91].text_offset = 0x002c537c;
        staff[91].pointers = new long[] {0x002ee8d8};
        staff[92].text_offset = 0x002c5398;
        staff[92].pointers = new long[] {0x002ee8e8, 0x002ee938};
        staff[93].text_offset = 0x002c53b0;
        staff[93].pointers = new long[] {0x002ee8f0};
        staff[94].text_offset = 0x002c53bc;
        staff[94].pointers = new long[] {0x002ee900};

        staff[95].text_offset = 0x002c53c8;
        staff[95].pointers = new long[] {0x002ee910};
        staff[96].text_offset = 0x002c53d8;
        staff[96].pointers = new long[] {0x002ee918};
        staff[97].text_offset = 0x002c53e4;
        staff[97].pointers = new long[] {0x002ee928};
        staff[98].text_offset = 0x002c53f4;
        staff[98].pointers = new long[] {0x002ee948, 0x002ee990};
        staff[99].text_offset = 0x002c5408;
        staff[99].pointers = new long[] {0x002ee958};

        staff[100].text_offset = 0x002c5414;
        staff[100].pointers = new long[] {0x002ee960};
        staff[101].text_offset = 0x002c5420;
        staff[101].pointers = new long[] {0x002ee968};
        staff[102].text_offset = 0x002c542c;
        staff[102].pointers = new long[] {0x002ee970};
        staff[103].text_offset = 0x002c5438;
        staff[103].pointers = new long[] {0x002ee978};
        staff[104].text_offset = 0x0030dd14;
        staff[104].pointers = new long[] {0x002ee980};

        staff[105].text_offset = 0x002c544c;
        staff[105].pointers = new long[] {0x002ee9a0};
        staff[106].text_offset = 0x002c5458;
        staff[106].pointers = new long[] {0x002ee9a8};
        staff[107].text_offset = 0x002c5468;
        staff[107].pointers = new long[] {0x002ee9b0};
        staff[108].text_offset = 0x002c5474;
        staff[108].pointers = new long[] {0x002ee9b8};
        staff[109].text_offset = 0x002c5480;
        staff[109].pointers = new long[] {0x002ee9c0};

        staff[110].text_offset = 0x002c548c;
        staff[110].pointers = new long[] {0x002ee9c8};
        staff[111].text_offset = 0x002c5498;
        staff[111].pointers = new long[] {0x002ee9d8};
        staff[112].text_offset = 0x002c54b0;
        staff[112].pointers = new long[] {0x002ee9f0};
        staff[113].text_offset = 0x002c54bc;
        staff[113].pointers = new long[] {0x002eea00};
        staff[114].text_offset = 0x002c54cc;
        staff[114].pointers = new long[] {0x002eea10};

        staff[115].text_offset = 0x002c54d8;
        staff[115].pointers = new long[] {0x002eea18};
        staff[116].text_offset = 0x002c54e4;
        staff[116].pointers = new long[] {0x002eea20};
        staff[117].text_offset = 0x002c54f0;
        staff[117].pointers = new long[] {0x002eea28};
        staff[118].text_offset = 0x002c54fc;
        staff[118].pointers = new long[] {0x002eea30};
        staff[119].text_offset = 0x002c5508;
        staff[119].pointers = new long[] {0x002eea38};

        staff[120].text_offset = 0x002c5518;
        staff[120].pointers = new long[] {0x002eea48};
        staff[121].text_offset = 0x002c5528;
        staff[121].pointers = new long[] {0x002eea58};
        staff[122].text_offset = 0x002c5534;
        staff[122].pointers = new long[] {0x002eea60};
        staff[123].text_offset = 0x002c5544;
        staff[123].pointers = new long[] {0x002eea68};
        staff[124].text_offset = 0x002c5550;
        staff[124].pointers = new long[] {0x002eea70};

        staff[125].text_offset = 0x002c555c;
        staff[125].pointers = new long[] {0x002eea78};
        staff[126].text_offset = 0x002c5568;
        staff[126].pointers = new long[] {0x002eea88};
        staff[127].text_offset = 0x002c557c;
        staff[127].pointers = new long[] {0x002eea98};
        staff[128].text_offset = 0x002c5588;
        staff[128].pointers = new long[] {0x002eeaa8};
        staff[129].text_offset = 0x002c5594;
        staff[129].pointers = new long[] {0x002eeab0};

        staff[130].text_offset = 0x002c55a0;
        staff[130].pointers = new long[] {0x002eeab8};
        staff[131].text_offset = 0x002c55ac;
        staff[131].pointers = new long[] {0x002eeac8};
        staff[132].text_offset = 0x002c55b8;
        staff[132].pointers = new long[] {0x002eead0};
        staff[133].text_offset = 0x002c55c4;
        staff[133].pointers = new long[] {0x002eeae0};
        staff[134].text_offset = 0x002c55d4;
        staff[134].pointers = new long[] {0x002eeaf0};

        staff[135].text_offset = 0x002c55e0;
        staff[135].pointers = new long[] {0x002eeaf8};
        staff[136].text_offset = 0x002c55ec;
        staff[136].pointers = new long[] {0x002eeb00};
        staff[137].text_offset = 0x002c55f8;
        staff[137].pointers = new long[] {0x002eeb08};
        staff[138].text_offset = 0x002c5604;
        staff[138].pointers = new long[] {0x002eeb10};
        staff[139].text_offset = 0x002c5610;
        staff[139].pointers = new long[] {0x002eeb18};

        staff[140].text_offset = 0x002c5620;
        staff[140].pointers = new long[] {0x002eeb20};
        staff[141].text_offset = 0x002c562c;
        staff[141].pointers = new long[] {0x002eeb30, 0x002eeb98};
        staff[142].text_offset = 0x002c5638;
        staff[142].pointers = new long[] {0x002eeb40};
        staff[143].text_offset = 0x002c5644;
        staff[143].pointers = new long[] {0x002eeb48};
        staff[144].text_offset = 0x002c5650;
        staff[144].pointers = new long[] {0x002eeb50};

        staff[145].text_offset = 0x002c565c;
        staff[145].pointers = new long[] {0x002eeb58};
        staff[146].text_offset = 0x002c5668;
        staff[146].pointers = new long[] {0x002eeb60};
        staff[147].text_offset = 0x002c5674;
        staff[147].pointers = new long[] {0x002eeb68};
        staff[148].text_offset = 0x002c5680;
        staff[148].pointers = new long[] {0x002eeb70};
        staff[149].text_offset = 0x002c568c;
        staff[149].pointers = new long[] {0x002eeb78};

        staff[150].text_offset = 0x002c5698;
        staff[150].pointers = new long[] {0x002eeb80};
        staff[151].text_offset = 0x002c56a4;
        staff[151].pointers = new long[] {0x002eeb88};
        staff[152].text_offset = 0x002c56b0;
        staff[152].pointers = new long[] {0x002eeba8};
        staff[153].text_offset = 0x002c56cc;
        staff[153].pointers = new long[] {0x002eebb0};
        staff[154].text_offset = 0x002c56d8;
        staff[154].pointers = new long[] {0x002eebb8};

        staff[155].text_offset = 0x002c56e4;
        staff[155].pointers = new long[] {0x002eebc0};
        staff[156].text_offset = 0x002c56f0;
        staff[156].pointers = new long[] {0x002eebc8};
        staff[157].text_offset = 0x002c56fc;
        staff[157].pointers = new long[] {0x002eebd0};
        staff[158].text_offset = 0x002c5708;
        staff[158].pointers = new long[] {0x002eebd8};
        staff[159].text_offset = 0x002c5714;
        staff[159].pointers = new long[] {0x002eebe0};

        staff[160].text_offset = 0x002c5720;
        staff[160].pointers = new long[] {0x002eebe8};
        staff[161].text_offset = 0x002c572c;
        staff[161].pointers = new long[] {0x002eebf8};
        staff[162].text_offset = 0x002c573c;
        staff[162].pointers = new long[] {0x002eec08};
        staff[163].text_offset = 0x002c5760;
        staff[163].pointers = new long[] {0x002eec20};
        staff[164].text_offset = 0x0030dd1c;
        staff[164].pointers = new long[] {0x002eec30};

        staff[165].text_offset = 0x002c577c;
        staff[165].pointers = new long[] {0x002eec40};
        staff[166].text_offset = 0x002c5798;
        staff[166].pointers = new long[] {0x002eec48};
        staff[167].text_offset = 0x002c57b0;
        staff[167].pointers = new long[] {0x002eec50};
        staff[168].text_offset = 0x002c57c4;
        staff[168].pointers = new long[] {0x002eec58};
        staff[169].text_offset = 0x002c57e0;
        staff[169].pointers = new long[] {0x002eec60};

        staff[170].text_offset = 0x002c57fc;
        staff[170].pointers = new long[] {0x002eec68};
        staff[171].text_offset = 0x002c580c;
        staff[171].pointers = new long[] {0x002eec78};
        staff[172].text_offset = 0x002c5818;
        staff[172].pointers = new long[] {0x002eec88};
        staff[173].text_offset = 0x002c5824;
        staff[173].pointers = new long[] {0x002eec98};
        staff[174].text_offset = 0x002c5844;
        staff[174].pointers = new long[] {0x002eeca8};

        staff[175].text_offset = 0x0030dd24;
        staff[175].pointers = new long[] {0x002eecb8};
        staff[176].text_offset = 0x002c5850;
        staff[176].pointers = new long[] {0x002eecc8};
        staff[177].text_offset = 0x002c5864;
        staff[177].pointers = new long[] {0x002eecd0};
        staff[178].text_offset = 0x0030dd2c;
        staff[178].pointers = new long[] {0x002eece0};
        staff[179].text_offset = 0x002c5878;
        staff[179].pointers = new long[] {0x002eecf0};

        staff[180].text_offset = 0x002c58a8;
        staff[180].pointers = new long[] {0x002eecf8};
        staff[181].text_offset = 0x0030dd34;
        staff[181].pointers = new long[] {0x002eed08};
        staff[182].text_offset = 0x002c58d0;
        staff[182].pointers = new long[] {0x002eed18};
    }


    public void initCast(){
        cast = new DOLstring[343];
        for (int i = 0; i < cast.length; i++){
            cast[i] = new DOLstring();
        }

        cast[0].text_offset = 0x002c58fc;
        cast[0].pointers = new long[] {0x002eed28};
        cast[1].text_offset = 0x002c5908;
        cast[1].pointers = new long[] {0x002eed2c, 0x002ef004};
        cast[2].text_offset = 0x002c5914;
        cast[2].pointers = new long[] {0x002eed30};
        cast[3].text_offset = 0x002c5920;
        cast[3].pointers = new long[] {0x002eed34};
        cast[4].text_offset = 0x002c5930;
        cast[4].pointers = new long[] {0x002eed38};

        cast[5].text_offset = 0x002c593c;
        cast[5].pointers = new long[] {0x002eed3c, 0x002eef14, 0x002eef24,
            0x002ef11c};
        cast[6].text_offset = 0x002c5948;
        cast[6].pointers = new long[] {0x002eed40};
        cast[7].text_offset = 0x002c5954;
        cast[7].pointers = new long[] {0x002eed44};
        cast[8].text_offset = 0x002c5960;
        cast[8].pointers = new long[] {0x002eed48};
        cast[9].text_offset = 0x002c5974;
        cast[9].pointers = new long[] {0x002eed4c};

        cast[10].text_offset = 0x002c5980;
        cast[10].pointers = new long[] {0x002eed50};
        cast[11].text_offset = 0x002c5990;
        cast[11].pointers = new long[] {0x002eed54, 0x002ef204, 0x002ef2fc};
        cast[12].text_offset = 0x002c599c;
        cast[12].pointers = new long[] {0x002eed60};
        cast[13].text_offset = 0x002c59b0;
        cast[13].pointers = new long[] {0x002eed64, 0x002ef0c4, 0x002ef2dc};
        cast[14].text_offset = 0x002c59bc;
        cast[14].pointers = new long[] {0x002eed68};

        cast[15].text_offset = 0x002c59d0;
        cast[15].pointers = new long[] {0x002eed6c, 0x002ef37c};
        cast[16].text_offset = 0x002c59dc;
        cast[16].pointers = new long[] {0x002eed70};
        cast[17].text_offset = 0x002c59f0;
        cast[17].pointers = new long[] {0x002eed74, 0x002eeedc, 0x002ef13c,
            0x002ef3e8};
        cast[18].text_offset = 0x002c59fc;
        cast[18].pointers = new long[] {0x002eed78};
        cast[19].text_offset = 0x002c5a0c;
        cast[19].pointers = new long[] {0x002eed7c, 0x002eeed4};

        cast[20].text_offset = 0x002c5a18;
        cast[20].pointers = new long[] {0x002eed80};
        cast[21].text_offset = 0x002c5a2c;
        cast[21].pointers = new long[] {0x002eed84, 0x002eee6c, 0x002ef1e4,
            0x002ef428};
        cast[22].text_offset = 0x002c5a4c;
        cast[22].pointers = new long[] {0x002eed90};
        cast[23].text_offset = 0x002c5a5c;
        cast[23].pointers = new long[] {0x002eed94, 0x002eeddc, 0x002eee14};
        cast[24].text_offset = 0x002c5a6c;
        cast[24].pointers = new long[] {0x002eed98};

        cast[25].text_offset = 0x002c5a84;
        cast[25].pointers = new long[] {0x002eed9c, 0x002eedec, 0x002eee1c,
            0x002eeeec};
        cast[26].text_offset = 0x002c5a90;
        cast[26].pointers = new long[] {0x002eeda0};
        cast[27].text_offset = 0x002c5aa8;
        cast[27].pointers = new long[] {0x002eeda4, 0x002eede4, 0x002eee24};
        cast[28].text_offset = 0x002c5ab4;
        cast[28].pointers = new long[] {0x002eeda8};
        cast[29].text_offset = 0x002c5acc;
        cast[29].pointers = new long[] {0x002eedac, 0x002eedd4, 0x002eee0c};

        cast[30].text_offset = 0x002c5adc;
        cast[30].pointers = new long[] {0x002eedb0};
        cast[31].text_offset = 0x002c5af0;
        cast[31].pointers = new long[] {0x002eedb4};
        cast[32].text_offset = 0x002c5b00;
        cast[32].pointers = new long[] {0x002eedb8};
        cast[33].text_offset = 0x002c5b14;
        cast[33].pointers = new long[] {0x002eedbc};
        cast[34].text_offset = 0x002c5b38;
        cast[34].pointers = new long[] {0x002eedc8};

        cast[35].text_offset = 0x002c5b48;
        cast[35].pointers = new long[] {0x002eedcc};
        cast[36].text_offset = 0x002c5b54;
        cast[36].pointers = new long[] {0x002eedd0};
        cast[37].text_offset = 0x002c5b70;
        cast[37].pointers = new long[] {0x002eedd8};
        cast[38].text_offset = 0x002c5b80;
        cast[38].pointers = new long[] {0x002eede0};
        cast[39].text_offset = 0x002c5b90;
        cast[39].pointers = new long[] {0x002eede8};

        cast[40].text_offset = 0x002c5ba4;
        cast[40].pointers = new long[] {0x002eedf0};
        cast[41].text_offset = 0x002c5bb4;
        cast[41].pointers = new long[] {0x002eedf4, 0x002eef6c, 0x002ef0b4,
            0x002ef0d4, 0x002ef174, 0x002ef1ac, 0x002ef254, 0x002ef3e0};
        cast[42].text_offset = 0x002c5bc0;
        cast[42].pointers = new long[] {0x002eedf8};
        cast[43].text_offset = 0x002c5bd4;
        cast[43].pointers = new long[] {0x002eedfc, 0x002eeee4};
        cast[44].text_offset = 0x002c5bf8;
        cast[44].pointers = new long[] {0x002eee08};

        cast[45].text_offset = 0x002c5c1c;
        cast[45].pointers = new long[] {0x002eee10};
        cast[46].text_offset = 0x002c5c30;
        cast[46].pointers = new long[] {0x002eee18};
        cast[47].text_offset = 0x002c5c48;
        cast[47].pointers = new long[] {0x002eee20};
        cast[48].text_offset = 0x002c5c70;
        cast[48].pointers = new long[] {0x002eee30};
        cast[49].text_offset = 0x002c5c80;
        cast[49].pointers = new long[] {0x002eee34};

        cast[50].text_offset = 0x002c5c8c;
        cast[50].pointers = new long[] {0x002eee38};
        cast[51].text_offset = 0x002c5c9c;
        cast[51].pointers = new long[] {0x002eee3c};
        cast[52].text_offset = 0x002c5ca8;
        cast[52].pointers = new long[] {0x002eee40};
        cast[53].text_offset = 0x002c5cb8;
        cast[53].pointers = new long[] {0x002eee44, 0x002ef1fc, 0x002ef354};
        cast[54].text_offset = 0x002c5cc8;
        cast[54].pointers = new long[] {0x002eee48};

        cast[55].text_offset = 0x002c5cdc;
        cast[55].pointers = new long[] {0x002eee4c};
        cast[56].text_offset = 0x002c5ce8;
        cast[56].pointers = new long[] {0x002eee50};
        cast[57].text_offset = 0x002c5cf8;
        cast[57].pointers = new long[] {0x002eee54, 0x002ef1b4, 0x002ef21c};
        cast[58].text_offset = 0x002c5d04;
        cast[58].pointers = new long[] {0x002eee58};
        cast[59].text_offset = 0x002c5d18;
        cast[59].pointers = new long[] {0x002eee5c, 0x002eef8c, 0x002ef044,
            0x002ef084, 0x002ef344};

        cast[60].text_offset = 0x002c5d24;
        cast[60].pointers = new long[] {0x002eee60};
        cast[61].text_offset = 0x002c5d34;
        cast[61].pointers = new long[] {0x002eee64, 0x002eeeb4};
        cast[62].text_offset = 0x002c5d40;
        cast[62].pointers = new long[] {0x002eee68};
        cast[63].text_offset = 0x002c5d58;
        cast[63].pointers = new long[] {0x002eee78};
        cast[64].text_offset = 0x002c5d6c;
        cast[64].pointers = new long[] {0x002eee7c, 0x002eefe4};

        cast[65].text_offset = 0x002c5d78;
        cast[65].pointers = new long[] {0x002eee80};
        cast[66].text_offset = 0x002c5d88;
        cast[66].pointers = new long[] {0x002eee84, 0x002ef1d4};
        cast[67].text_offset = 0x0030dd3c;
        cast[67].pointers = new long[] {0x002eee88};
        cast[68].text_offset = 0x002c5d94;
        cast[68].pointers = new long[] {0x002eee8c};
        cast[69].text_offset = 0x0030dd44;
        cast[69].pointers = new long[] {0x002eee90};

        cast[70].text_offset = 0x002c5da0;
        cast[70].pointers = new long[] {0x002eee94};
        cast[71].text_offset = 0x002c5db0;
        cast[71].pointers = new long[] {0x002eee98};
        cast[72].text_offset = 0x002c5dbc;
        cast[72].pointers = new long[] {0x002eee9c};
        cast[73].text_offset = 0x002c5dc8;
        cast[73].pointers = new long[] {0x002eeea0};
        cast[74].text_offset = 0x002c5dd4;
        cast[74].pointers = new long[] {0x002eeea4, 0x002eeec4, 0x002eef3c,
            0x002ef0e4};

        cast[75].text_offset = 0x002c5de0;
        cast[75].pointers = new long[] {0x002eeea8};
        cast[76].text_offset = 0x002c5df0;
        cast[76].pointers = new long[] {0x002eeeac, 0x002ef124};
        cast[77].text_offset = 0x002c5dfc;
        cast[77].pointers = new long[] {0x002eeeb0};
        cast[78].text_offset = 0x002c5e08;
        cast[78].pointers = new long[] {0x002eeec0};
        cast[79].text_offset = 0x0030dd4c;
        cast[79].pointers = new long[] {0x002eeec8};

        cast[80].text_offset = 0x002c5e1c;
        cast[80].pointers = new long[] {0x002eeecc};
        cast[81].text_offset = 0x002c5e28;
        cast[81].pointers = new long[] {0x002eeed0};
        cast[82].text_offset = 0x002c5e34;
        cast[82].pointers = new long[] {0x002eeed8};
        cast[83].text_offset = 0x002c5e40;
        cast[83].pointers = new long[] {0x002eeee0};
        cast[84].text_offset = 0x002c5e50;
        cast[84].pointers = new long[] {0x002eeee8};

        cast[85].text_offset = 0x002c5e60;
        cast[85].pointers = new long[] {0x002eeef0};
        cast[86].text_offset = 0x002c5e70;
        cast[86].pointers = new long[] {0x002eeef4, 0x002ef0ac};
        cast[87].text_offset = 0x002c5e7c;
        cast[87].pointers = new long[] {0x002eeef8};
        cast[88].text_offset = 0x002c5e8c;
        cast[88].pointers = new long[] {0x002eeefc, 0x002eef94};
        cast[89].text_offset = 0x002c5e98;
        cast[89].pointers = new long[] {0x002eef08};

        cast[90].text_offset = 0x002c5eac;
        cast[90].pointers = new long[] {0x002eef0c};
        cast[91].text_offset = 0x002c5eb8;
        cast[91].pointers = new long[] {0x002eef10};
        cast[92].text_offset = 0x002c5ec4;
        cast[92].pointers = new long[] {0x002eef18};
        cast[93].text_offset = 0x002c5ed0;
        cast[93].pointers = new long[] {0x002eef1c, 0x002ef194};
        cast[94].text_offset = 0x002c5edc;
        cast[94].pointers = new long[] {0x002eef20};

        cast[95].text_offset = 0x0030dd54;
        cast[95].pointers = new long[] {0x002eef28};
        cast[96].text_offset = 0x002c5ee8;
        cast[96].pointers = new long[] {0x002eef2c, 0x002ef214};
        cast[97].text_offset = 0x0030dd5c;
        cast[97].pointers = new long[] {0x002eef30};
        cast[98].text_offset = 0x002c5ef4;
        cast[98].pointers = new long[] {0x002eef34, 0x002ef1cc};
        cast[99].text_offset = 0x002c5f00;
        cast[99].pointers = new long[] {0x002eef38};

        cast[100].text_offset = 0x002c5f3c;
        cast[100].pointers = new long[] {0x002eef48};
        cast[101].text_offset = 0x002c5f54;
        cast[101].pointers = new long[] {0x002eef4c};
        cast[102].text_offset = 0x002c5f60;
        cast[102].pointers = new long[] {0x002eef50};
        cast[103].text_offset = 0x002c5f7c;
        cast[103].pointers = new long[] {0x002eef54, 0x002ef264, 0x002ef29c};
        cast[104].text_offset = 0x002c5f8c;
        cast[104].pointers = new long[] {0x002eef58};

        cast[105].text_offset = 0x002c5fa4;
        cast[105].pointers = new long[] {0x002eef5c};
        cast[106].text_offset = 0x002c5fb0;
        cast[106].pointers = new long[] {0x002eef60};
        cast[107].text_offset = 0x002c5fc8;
        cast[107].pointers = new long[] {0x002eef64, 0x002ef19c};
        cast[108].text_offset = 0x002c5fd4;
        cast[108].pointers = new long[] {0x002eef68};
        cast[109].text_offset = 0x002c5ff4;
        cast[109].pointers = new long[] {0x002eef70};

        cast[110].text_offset = 0x002c600c;
        cast[110].pointers = new long[] {0x002eef74, 0x002ef444};
        cast[111].text_offset = 0x002c603c;
        cast[111].pointers = new long[] {0x002eef80};
        cast[112].text_offset = 0x002c604c;
        cast[112].pointers = new long[] {0x002eef84, 0x002ef2ec};
        cast[113].text_offset = 0x002c6058;
        cast[113].pointers = new long[] {0x002eef88};
        cast[114].text_offset = 0x002c6074;
        cast[114].pointers = new long[] {0x002eef90};

        cast[115].text_offset = 0x002c6088;
        cast[115].pointers = new long[] {0x002eef98};
        cast[116].text_offset = 0x002c609c;
        cast[116].pointers = new long[] {0x002eef9c};
        cast[117].text_offset = 0x002c60a8;
        cast[117].pointers = new long[] {0x002eefa0};
        cast[118].text_offset = 0x002c60bc;
        cast[118].pointers = new long[] {0x002eefa4};
        cast[119].text_offset = 0x002c60c8;
        cast[119].pointers = new long[] {0x002eefa8};

        cast[120].text_offset = 0x002c60dc;
        cast[120].pointers = new long[] {0x002eefac};
        cast[121].text_offset = 0x002c60ec;
        cast[121].pointers = new long[] {0x002eefb0};
        cast[122].text_offset = 0x002c6100;
        cast[122].pointers = new long[] {0x002eefb4, 0x002ef374};
        cast[123].text_offset = 0x002c610c;
        cast[123].pointers = new long[] {0x002eefb8};
        cast[124].text_offset = 0x002c6120;
        cast[124].pointers = new long[] {0x002eefbc, 0x002ef08c};

        cast[125].text_offset = 0x002c6140;
        cast[125].pointers = new long[] {0x002eefc8};
        cast[126].text_offset = 0x002c6154;
        cast[126].pointers = new long[] {0x002eefcc};
        cast[127].text_offset = 0x002c6160;
        cast[127].pointers = new long[] {0x002eefd0};
        cast[128].text_offset = 0x002c6170;
        cast[128].pointers = new long[] {0x002eefd4};
        cast[129].text_offset = 0x002c6180;
        cast[129].pointers = new long[] {0x002eefd8};

        cast[130].text_offset = 0x002c6194;
        cast[130].pointers = new long[] {0x002eefdc, 0x002ef0ec, 0x002ef18c};
        cast[131].text_offset = 0x002c61a0;
        cast[131].pointers = new long[] {0x002eefe0};
        cast[132].text_offset = 0x002c61b4;
        cast[132].pointers = new long[] {0x002eefe8};
        cast[133].text_offset = 0x002c61c4;
        cast[133].pointers = new long[] {0x002eefec};
        cast[134].text_offset = 0x002c61d0;
        cast[134].pointers = new long[] {0x002eeff0};

        cast[135].text_offset = 0x002c61e4;
        cast[135].pointers = new long[] {0x002eeff4};
        cast[136].text_offset = 0x002c6208;
        cast[136].pointers = new long[] {0x002ef000};
        cast[137].text_offset = 0x002c621c;
        cast[137].pointers = new long[] {0x002ef008};
        cast[138].text_offset = 0x002c6228;
        cast[138].pointers = new long[] {0x002ef00c};
        cast[139].text_offset = 0x002c6238;
        cast[139].pointers = new long[] {0x002ef010};

        cast[140].text_offset = 0x002c6248;
        cast[140].pointers = new long[] {0x002ef014};
        cast[141].text_offset = 0x002c6254;
        cast[141].pointers = new long[] {0x002ef018};
        cast[142].text_offset = 0x002c6268;
        cast[142].pointers = new long[] {0x002ef01c};
        cast[143].text_offset = 0x002c6274;
        cast[143].pointers = new long[] {0x002ef020};
        cast[144].text_offset = 0x002c6284;
        cast[144].pointers = new long[] {0x002ef024, 0x002ef0dc, 0x002ef12c,
            0x002ef284, 0x002ef3ec};

        cast[145].text_offset = 0x002c6290;
        cast[145].pointers = new long[] {0x002ef028};
        cast[146].text_offset = 0x002c62a4;
        cast[146].pointers = new long[] {0x002ef02c, 0x002ef14c};
        cast[147].text_offset = 0x002c62b0;
        cast[147].pointers = new long[] {0x002ef030};
        cast[148].text_offset = 0x002c62c0;
        cast[148].pointers = new long[] {0x002ef034, 0x002ef03c, 0x002ef074};
        cast[149].text_offset = 0x002c62d0;
        cast[149].pointers = new long[] {0x002ef038};

        cast[150].text_offset = 0x002c62dc;
        cast[150].pointers = new long[] {0x002ef040};
        cast[151].text_offset = 0x002c62f0;
        cast[151].pointers = new long[] {0x002ef048};
        cast[152].text_offset = 0x002c6304;
        cast[152].pointers = new long[] {0x002ef04c};
        cast[153].text_offset = 0x002c6328;
        cast[153].pointers = new long[] {0x002ef058};
        cast[154].text_offset = 0x002c633c;
        cast[154].pointers = new long[] {0x002ef05c, 0x002ef41c};

        cast[155].text_offset = 0x002c6348;
        cast[155].pointers = new long[] {0x002ef060};
        cast[156].text_offset = 0x002c6358;
        cast[156].pointers = new long[] {0x002ef064, 0x002ef07c};
        cast[157].text_offset = 0x002c6368;
        cast[157].pointers = new long[] {0x002ef068};
        cast[158].text_offset = 0x002c637c;
        cast[158].pointers = new long[] {0x002ef06c, 0x002ef154};
        cast[159].text_offset = 0x002c6388;
        cast[159].pointers = new long[] {0x002ef070};

        cast[160].text_offset = 0x002c639c;
        cast[160].pointers = new long[] {0x002ef078};
        cast[161].text_offset = 0x002c63b0;
        cast[161].pointers = new long[] {0x002ef080};
        cast[162].text_offset = 0x002c63c4;
        cast[162].pointers = new long[] {0x002ef088};
        cast[163].text_offset = 0x002c63e0;
        cast[163].pointers = new long[] {0x002ef090};
        cast[164].text_offset = 0x002c63f0;
        cast[164].pointers = new long[] {0x002ef094, 0x002ef20c, 0x002ef384};

        cast[165].text_offset = 0x002c63fc;
        cast[165].pointers = new long[] {0x002ef098};
        cast[166].text_offset = 0x002c6410;
        cast[166].pointers = new long[] {0x002ef09c};
        cast[167].text_offset = 0x002c641c;
        cast[167].pointers = new long[] {0x002ef0a8};
        cast[168].text_offset = 0x002c6430;
        cast[168].pointers = new long[] {0x002ef0b0};
        cast[169].text_offset = 0x002c6440;
        cast[169].pointers = new long[] {0x002ef0b8};

        cast[170].text_offset = 0x002c6454;
        cast[170].pointers = new long[] {0x002ef0bc, 0x002ef30c};
        cast[171].text_offset = 0x002c6460;
        cast[171].pointers = new long[] {0x002ef0c0};
        cast[172].text_offset = 0x002c6474;
        cast[172].pointers = new long[] {0x002ef0c8};
        cast[173].text_offset = 0x002c648c;
        cast[173].pointers = new long[] {0x002ef0cc};
        cast[174].text_offset = 0x002c6498;
        cast[174].pointers = new long[] {0x002ef0d0};

        cast[175].text_offset = 0x002c64ac;
        cast[175].pointers = new long[] {0x002ef0d8};
        cast[176].text_offset = 0x002c64c4;
        cast[176].pointers = new long[] {0x002ef0e0};
        cast[177].text_offset = 0x002c64d8;
        cast[177].pointers = new long[] {0x002ef0e8};
        cast[178].text_offset = 0x002c650c;
        cast[178].pointers = new long[] {0x002ef0f8};
        cast[179].text_offset = 0x002c6530;
        cast[179].pointers = new long[] {0x002ef0fc};

        cast[180].text_offset = 0x002c653c;
        cast[180].pointers = new long[] {0x002ef100};
        cast[181].text_offset = 0x002c6554;
        cast[181].pointers = new long[] {0x002ef104, 0x002ef31c};
        cast[182].text_offset = 0x002c6560;
        cast[182].pointers = new long[] {0x002ef108};
        cast[183].text_offset = 0x002c6574;
        cast[183].pointers = new long[] {0x002ef10c};
        cast[184].text_offset = 0x0030dd64;
        cast[184].pointers = new long[] {0x002ef110};

        cast[185].text_offset = 0x002c6580;
        cast[185].pointers = new long[] {0x002ef114};
        cast[186].text_offset = 0x002c658c;
        cast[186].pointers = new long[] {0x002ef118};
        cast[187].text_offset = 0x002c6598;
        cast[187].pointers = new long[] {0x002ef120};
        cast[188].text_offset = 0x002c65a4;
        cast[188].pointers = new long[] {0x002ef128};
        cast[189].text_offset = 0x0030dd6c;
        cast[189].pointers = new long[] {0x002ef130};

        cast[190].text_offset = 0x002c65b0;
        cast[190].pointers = new long[] {0x002ef134};
        cast[191].text_offset = 0x0030dd74;
        cast[191].pointers = new long[] {0x002ef138};
        cast[192].text_offset = 0x002c65d0;
        cast[192].pointers = new long[] {0x002ef148};
        cast[193].text_offset = 0x002c65e0;
        cast[193].pointers = new long[] {0x002ef150};
        cast[194].text_offset = 0x002c65f4;
        cast[194].pointers = new long[] {0x002ef158};

        cast[195].text_offset = 0x002c6608;
        cast[195].pointers = new long[] {0x002ef15c};
        cast[196].text_offset = 0x002c6614;
        cast[196].pointers = new long[] {0x002ef160};
        cast[197].text_offset = 0x002c6628;
        cast[197].pointers = new long[] {0x002ef164};
        cast[198].text_offset = 0x002c6638;
        cast[198].pointers = new long[] {0x002ef168};
        cast[199].text_offset = 0x002c664c;
        cast[199].pointers = new long[] {0x002ef16c};

        cast[200].text_offset = 0x002c665c;
        cast[200].pointers = new long[] {0x002ef170};
        cast[201].text_offset = 0x002c6670;
        cast[201].pointers = new long[] {0x002ef178};
        cast[202].text_offset = 0x002c6688;
        cast[202].pointers = new long[] {0x002ef17c};
        cast[203].text_offset = 0x0030dd7c;
        cast[203].pointers = new long[] {0x002ef188};
        cast[204].text_offset = 0x002c6694;
        cast[204].pointers = new long[] {0x002ef190};

        cast[205].text_offset = 0x0030dd84;
        cast[205].pointers = new long[] {0x002ef198};
        cast[206].text_offset = 0x0030dd8c;
        cast[206].pointers = new long[] {0x002ef1a0};
        cast[207].text_offset = 0x002c66a4;
        cast[207].pointers = new long[] {0x002ef1a4, 0x002ef28c};
        cast[208].text_offset = 0x0030dd94;
        cast[208].pointers = new long[] {0x002ef1a8};
        cast[209].text_offset = 0x002c66b4;
        cast[209].pointers = new long[] {0x002ef1b0};

        cast[210].text_offset = 0x002c66e0;
        cast[210].pointers = new long[] {0x002ef1c0};
        cast[211].text_offset = 0x002c66f0;
        cast[211].pointers = new long[] {0x002ef1c4};
        cast[212].text_offset = 0x002c66fc;
        cast[212].pointers = new long[] {0x002ef1c8};
        cast[213].text_offset = 0x002c670c;
        cast[213].pointers = new long[] {0x002ef1d0};
        cast[214].text_offset = 0x002c6718;
        cast[214].pointers = new long[] {0x002ef1d8};

        cast[215].text_offset = 0x002c6724;
        cast[215].pointers = new long[] {0x002ef1dc, 0x002ef36c};
        cast[216].text_offset = 0x002c6730;
        cast[216].pointers = new long[] {0x002ef1e0};
        cast[217].text_offset = 0x0030dd9c;
        cast[217].pointers = new long[] {0x002ef1e8};
        cast[218].text_offset = 0x002c673c;
        cast[218].pointers = new long[] {0x002ef1ec};
        cast[219].text_offset = 0x002c6760;
        cast[219].pointers = new long[] {0x002ef1f8};

        cast[220].text_offset = 0x002c6774;
        cast[220].pointers = new long[] {0x002ef200};
        cast[221].text_offset = 0x002c6788;
        cast[221].pointers = new long[] {0x002ef208};
        cast[222].text_offset = 0x002c679c;
        cast[222].pointers = new long[] {0x002ef210};
        cast[223].text_offset = 0x002c67a8;
        cast[223].pointers = new long[] {0x002ef218};
        cast[224].text_offset = 0x002c67bc;
        cast[224].pointers = new long[] {0x002ef220};

        cast[225].text_offset = 0x002c67c8;
        cast[225].pointers = new long[] {0x002ef224};
        cast[226].text_offset = 0x002c67ec;
        cast[226].pointers = new long[] {0x002ef230};
        cast[227].text_offset = 0x002c67f8;
        cast[227].pointers = new long[] {0x002ef234, 0x002ef27c};
        cast[228].text_offset = 0x002c6804;
        cast[228].pointers = new long[] {0x002ef238};
        cast[229].text_offset = 0x002c6810;
        cast[229].pointers = new long[] {0x002ef23c};

        cast[230].text_offset = 0x002c6820;
        cast[230].pointers = new long[] {0x002ef240};
        cast[231].text_offset = 0x002c682c;
        cast[231].pointers = new long[] {0x002ef244};
        cast[232].text_offset = 0x002c683c;
        cast[232].pointers = new long[] {0x002ef248};
        cast[233].text_offset = 0x002c684c;
        cast[233].pointers = new long[] {0x002ef24c, 0x002ef274};
        cast[234].text_offset = 0x002c685c;
        cast[234].pointers = new long[] {0x002ef250};

        cast[235].text_offset = 0x002c6868;
        cast[235].pointers = new long[] {0x002ef258};
        cast[236].text_offset = 0x002c6874;
        cast[236].pointers = new long[] {0x002ef25c};
        cast[237].text_offset = 0x002c6884;
        cast[237].pointers = new long[] {0x002ef260};
        cast[238].text_offset = 0x002c6890;
        cast[238].pointers = new long[] {0x002ef270};
        cast[239].text_offset = 0x002c68a0;
        cast[239].pointers = new long[] {0x002ef278};

        cast[240].text_offset = 0x002c68ac;
        cast[240].pointers = new long[] {0x002ef280};
        cast[241].text_offset = 0x002c68b8;
        cast[241].pointers = new long[] {0x002ef288};
        cast[242].text_offset = 0x002c68c8;
        cast[242].pointers = new long[] {0x002ef290};
        cast[243].text_offset = 0x002c68d4;
        cast[243].pointers = new long[] {0x002ef294, 0x002ef44c};
        cast[244].text_offset = 0x002c68e0;
        cast[244].pointers = new long[] {0x002ef298};

        cast[245].text_offset = 0x002c6910;
        cast[245].pointers = new long[] {0x002ef2a8};
        cast[246].text_offset = 0x002c691c;
        cast[246].pointers = new long[] {0x002ef2ac};
        cast[247].text_offset = 0x0030dda4;
        cast[247].pointers = new long[] {0x002ef2b0};
        cast[248].text_offset = 0x002c6928;
        cast[248].pointers = new long[] {0x002ef2b4};
        cast[249].text_offset = 0x002c6934;
        cast[249].pointers = new long[] {0x002ef2b8};

        cast[250].text_offset = 0x002c6940;
        cast[250].pointers = new long[] {0x002ef2bc};
        cast[251].text_offset = 0x002c694c;
        cast[251].pointers = new long[] {0x002ef2c0};
        cast[252].text_offset = 0x002c6960;
        cast[252].pointers = new long[] {0x002ef2c4};
        cast[253].text_offset = 0x002c696c;
        cast[253].pointers = new long[] {0x002ef2c8};
        cast[254].text_offset = 0x002c697c;
        cast[254].pointers = new long[] {0x002ef2cc};

        cast[255].text_offset = 0x002c6988;
        cast[255].pointers = new long[] {0x002ef2d0};
        cast[256].text_offset = 0x002c6994;
        cast[256].pointers = new long[] {0x002ef2d4};
        cast[257].text_offset = 0x002c69a0;
        cast[257].pointers = new long[] {0x002ef2d8};
        cast[258].text_offset = 0x002c69ac;
        cast[258].pointers = new long[] {0x002ef2e0};
        cast[259].text_offset = 0x002c69bc;
        cast[259].pointers = new long[] {0x002ef2e4};

        cast[260].text_offset = 0x0030ddac;
        cast[260].pointers = new long[] {0x002ef2e8};
        cast[261].text_offset = 0x002c69d8;
        cast[261].pointers = new long[] {0x002ef2f8};
        cast[262].text_offset = 0x002c69e4;
        cast[262].pointers = new long[] {0x002ef300};
        cast[263].text_offset = 0x002c69f0;
        cast[263].pointers = new long[] {0x002ef304};
        cast[264].text_offset = 0x002c69fc;
        cast[264].pointers = new long[] {0x002ef308};

        cast[265].text_offset = 0x0030ddb4;
        cast[265].pointers = new long[] {0x002ef310};
        cast[266].text_offset = 0x002c6a08;
        cast[266].pointers = new long[] {0x002ef314};
        cast[267].text_offset = 0x0030ddbc;
        cast[267].pointers = new long[] {0x002ef318};
        cast[268].text_offset = 0x0030ddc4;
        cast[268].pointers = new long[] {0x002ef320};
        cast[269].text_offset = 0x002c6a14;
        cast[269].pointers = new long[] {0x002ef324, 0x002ef440};

        cast[270].text_offset = 0x002c6a20;
        cast[270].pointers = new long[] {0x002ef328};
        cast[271].text_offset = 0x002c6a2c;
        cast[271].pointers = new long[] {0x002ef32c};
        cast[272].text_offset = 0x002c6a3c;
        cast[272].pointers = new long[] {0x002ef330};
        cast[273].text_offset = 0x002c6a4c;
        cast[273].pointers = new long[] {0x002ef334};
        cast[274].text_offset = 0x002c6a58;
        cast[274].pointers = new long[] {0x002ef338};

        cast[275].text_offset = 0x002c6a68;
        cast[275].pointers = new long[] {0x002ef33c};
        cast[276].text_offset = 0x0030ddcc;
        cast[276].pointers = new long[] {0x002ef340};
        cast[277].text_offset = 0x002c6a98;
        cast[277].pointers = new long[] {0x002ef350};
        cast[278].text_offset = 0x002c6aa4;
        cast[278].pointers = new long[] {0x002ef358};
        cast[279].text_offset = 0x002c6ab0;
        cast[279].pointers = new long[] {0x002ef35c};

        cast[280].text_offset = 0x002c6abc;
        cast[280].pointers = new long[] {0x002ef360};
        cast[281].text_offset = 0x002c6ac8;
        cast[281].pointers = new long[] {0x002ef364};
        cast[282].text_offset = 0x002c6ad4;
        cast[282].pointers = new long[] {0x002ef368};
        cast[283].text_offset = 0x002c6ae4;
        cast[283].pointers = new long[] {0x002ef370};
        cast[284].text_offset = 0x002c6af0;
        cast[284].pointers = new long[] {0x002ef378};

        cast[285].text_offset = 0x002c6afc;
        cast[285].pointers = new long[] {0x002ef380};
        cast[286].text_offset = 0x002c6b0c;
        cast[286].pointers = new long[] {0x002ef388};
        cast[287].text_offset = 0x002c6b18;
        cast[287].pointers = new long[] {0x002ef38c};
        cast[288].text_offset = 0x002c6b3c;
        cast[288].pointers = new long[] {0x002ef398};
        cast[289].text_offset = 0x002c6b4c;
        cast[289].pointers = new long[] {0x002ef39c};

        cast[290].text_offset = 0x002c6b58;
        cast[290].pointers = new long[] {0x002ef3a0};
        cast[291].text_offset = 0x002c6b68;
        cast[291].pointers = new long[] {0x002ef3a4};
        cast[292].text_offset = 0x002c6b74;
        cast[292].pointers = new long[] {0x002ef3a8};
        cast[293].text_offset = 0x002c6b90;
        cast[293].pointers = new long[] {0x002ef3ac};
        cast[294].text_offset = 0x002c6ba0;
        cast[294].pointers = new long[] {0x002ef3b0};

        cast[295].text_offset = 0x002c6bb8;
        cast[295].pointers = new long[] {0x002ef3b4};
        cast[296].text_offset = 0x002c6bc4;
        cast[296].pointers = new long[] {0x002ef3b8};
        cast[297].text_offset = 0x002c6bdc;
        cast[297].pointers = new long[] {0x002ef3bc};
        cast[298].text_offset = 0x002c6be8;
        cast[298].pointers = new long[] {0x002ef3c0};
        cast[299].text_offset = 0x002c6c00;
        cast[299].pointers = new long[] {0x002ef3c4};

        cast[300].text_offset = 0x002c6c0c;
        cast[300].pointers = new long[] {0x002ef3c8};
        cast[301].text_offset = 0x002c6c20;
        cast[301].pointers = new long[] {0x002ef3cc};
        cast[302].text_offset = 0x002c6c2c;
        cast[302].pointers = new long[] {0x002ef3d0};
        cast[303].text_offset = 0x002c6c48;
        cast[303].pointers = new long[] {0x002ef3d4};
        cast[304].text_offset = 0x002c6c54;
        cast[304].pointers = new long[] {0x002ef3e4};

        cast[305].text_offset = 0x002c6c60;
        cast[305].pointers = new long[] {0x002ef3f0};
        cast[306].text_offset = 0x002c6c6c;
        cast[306].pointers = new long[] {0x002ef3f4};
        cast[307].text_offset = 0x002c6c78;
        cast[307].pointers = new long[] {0x002ef3f8};
        cast[308].text_offset = 0x002c6c84;
        cast[308].pointers = new long[] {0x002ef3fc};
        cast[309].text_offset = 0x002c6c90;
        cast[309].pointers = new long[] {0x002ef400};

        cast[310].text_offset = 0x002c6ca0;
        cast[310].pointers = new long[] {0x002ef404};
        cast[311].text_offset = 0x002c6cac;
        cast[311].pointers = new long[] {0x002ef408};
        cast[312].text_offset = 0x002c6cb8;
        cast[312].pointers = new long[] {0x002ef40c};
        cast[313].text_offset = 0x002c6cc4;
        cast[313].pointers = new long[] {0x002ef410};
        cast[314].text_offset = 0x002c6cd0;
        cast[314].pointers = new long[] {0x002ef414};

        cast[315].text_offset = 0x002c6cdc;
        cast[315].pointers = new long[] {0x002ef418};
        cast[316].text_offset = 0x002c6cec;
        cast[316].pointers = new long[] {0x002ef42c};
        cast[317].text_offset = 0x002c6cf8;
        cast[317].pointers = new long[] {0x002ef430};
        cast[318].text_offset = 0x002c6d04;
        cast[318].pointers = new long[] {0x002ef434};
        cast[319].text_offset = 0x002c6d10;
        cast[319].pointers = new long[] {0x002ef438};

        cast[320].text_offset = 0x002c6d1c;
        cast[320].pointers = new long[] {0x002ef43c};
        cast[321].text_offset = 0x002c6d2c;
        cast[321].pointers = new long[] {0x002ef448};
        cast[322].text_offset = 0x002c6d38;
        cast[322].pointers = new long[] {0x002ef454};
        cast[323].text_offset = 0x002c6d9c;
        cast[323].pointers = new long[] {0x002ef478};
        cast[324].text_offset = 0x002c58e8;
        cast[324].pointers = new long[] {0x0030c4a8};

        cast[325].text_offset = 0x002c5a38;
        cast[325].pointers = new long[] {0x0030c4ac};
        cast[326].text_offset = 0x002c5b20;
        cast[326].pointers = new long[] {0x0030c4b0};
        cast[327].text_offset = 0x002c5be0;
        cast[327].pointers = new long[] {0x0030c4b4};
        cast[328].text_offset = 0x002c5c5c;
        cast[328].pointers = new long[] {0x0030c4b8};
        cast[329].text_offset = 0x002c5f0c;
        cast[329].pointers = new long[] {0x0030c4bc};

        cast[330].text_offset = 0x002c6018;
        cast[330].pointers = new long[] {0x0030c4c0};
        cast[331].text_offset = 0x002c612c;
        cast[331].pointers = new long[] {0x0030c4c4};
        cast[332].text_offset = 0x002c61f0;
        cast[332].pointers = new long[] {0x0030c4c8};
        cast[333].text_offset = 0x002c6314;
        cast[333].pointers = new long[] {0x0030c4cc};
        cast[334].text_offset = 0x002c64f0;
        cast[334].pointers = new long[] {0x0030c4d0};

        cast[335].text_offset = 0x002c65bc;
        cast[335].pointers = new long[] {0x0030c4d4};
        cast[336].text_offset = 0x002c66c4;
        cast[336].pointers = new long[] {0x0030c4d8};
        cast[337].text_offset = 0x002c6748;
        cast[337].pointers = new long[] {0x0030c4dc};
        cast[338].text_offset = 0x002c67d4;
        cast[338].pointers = new long[] {0x0030c4e0};
        cast[339].text_offset = 0x002c68ec;
        cast[339].pointers = new long[] {0x0030c4e4};

        cast[340].text_offset = 0x002c69c8;
        cast[340].pointers = new long[] {0x0030c4e8};
        cast[341].text_offset = 0x002c6a80;
        cast[341].pointers = new long[] {0x0030c4ec};
        cast[342].text_offset = 0x002c6b24;
        cast[342].pointers = new long[] {0x0030c4f0};
    }


    public void initMemCard(){
        mem_card = new DOLstring[82];
        for (int i = 0; i < mem_card.length; i++){
            mem_card[i] = new DOLstring();
        }

        mem_card[0].text_offset = 0x002c3340;
        mem_card[0].pointers = new long[] {0x002e9b9c};
        mem_card[1].text_offset = 0x002c3374;
        mem_card[1].pointers = new long[] {0x002e9ba8, 0x002e9bd8, 0x002e9c08,
            0x002e9c38, 0x002e9c68, 0x002e9c98, 0x002e9cc8, 0x002e9cf8, 0x002e9d28,
            0x002e9e6c, 0x002e9e9c};
        mem_card[2].text_offset = 0x002c33a0;
        mem_card[2].pointers = new long[] {0x002e9bb4, 0x002e9be4, 0x002e9c14,
            0x002e9c44, 0x002e9c74, 0x002e9ca4, 0x002e9cd4, 0x002e9d04, 0x002e9d34,
            0x002e9e78, 0x002e9ea8};
        mem_card[3].text_offset = 0x002c33b8;
        mem_card[3].pointers = new long[] {0x002e9bcc};
        mem_card[4].text_offset = 0x002c33dc;
        mem_card[4].pointers = new long[] {0x002e9bfc};

        mem_card[5].text_offset = 0x002c3400;
        mem_card[5].pointers = new long[] {0x002e9c2c};
        mem_card[6].text_offset = 0x002c3414;
        mem_card[6].pointers = new long[] {0x002e9c5c};
        mem_card[7].text_offset = 0x002c3438;
        mem_card[7].pointers = new long[] {0x002e9c8c};
        mem_card[8].text_offset = 0x002c345c;
        mem_card[8].pointers = new long[] {0x002e9cbc};
        mem_card[9].text_offset = 0x002c3470;
        mem_card[9].pointers = new long[] {0x002e9cec};

        mem_card[10].text_offset = 0x002c3494;
        mem_card[10].pointers = new long[] {0x002e9d1c};
        mem_card[11].text_offset = 0x002c34b8;
        mem_card[11].pointers = new long[] {0x002e9d4c, 0x002e9da0, 0x002ea454};
        mem_card[12].text_offset = 0x002c34d8;
        mem_card[12].pointers = new long[] {0x002e9d58};
        mem_card[13].text_offset = 0x002c34f8;
        mem_card[13].pointers = new long[] {0x002e9d64};
        mem_card[14].text_offset = 0x002c3508;
        mem_card[14].pointers = new long[] {0x002e9d7c};

        mem_card[15].text_offset = 0x002c3518;
        mem_card[15].pointers = new long[] {0x002e9d88};
        mem_card[16].text_offset = 0x002c353c;
        mem_card[16].pointers = new long[] {0x002e9dac};
        mem_card[17].text_offset = 0x002c3550;
        mem_card[17].pointers = new long[] {0x002e9dc4};
        mem_card[18].text_offset = 0x002c3588;
        mem_card[18].pointers = new long[] {0x002e9dd0, 0x002e9e00};
        mem_card[19].text_offset = 0x002c35a8;
        mem_card[19].pointers = new long[] {0x002e9de8};

        mem_card[20].text_offset = 0x002c35c4;
        mem_card[20].pointers = new long[] {0x002e9df4};
        mem_card[21].text_offset = 0x002c35f4;
        mem_card[21].pointers = new long[] {0x002e9e18};
        mem_card[22].text_offset = 0x002c361c;
        mem_card[22].pointers = new long[] {0x002e9e30};
        mem_card[23].text_offset = 0x002c3648;
        mem_card[23].pointers = new long[] {0x002e9e3c};
        mem_card[24].text_offset = 0x002c3664;
        mem_card[24].pointers = new long[] {0x002e9e48};

        mem_card[25].text_offset = 0x002c3684;
        mem_card[25].pointers = new long[] {0x002e9e60};
        mem_card[26].text_offset = 0x002c3698;
        mem_card[26].pointers = new long[] {0x002e9e90};
        mem_card[27].text_offset = 0x002c36bc;
        mem_card[27].pointers = new long[] {0x002e9ec0, 0x002e9ef0, 0x002e9f20, 0x002ea214};
        mem_card[28].text_offset = 0x002c36dc;
        mem_card[28].pointers = new long[] {0x002e9ecc, 0x002e9efc};
        mem_card[29].text_offset = 0x002c36f8;
        mem_card[29].pointers = new long[] {0x002e9ed8, 0x002e9f08};

        mem_card[30].text_offset = 0x002c370c;
        mem_card[30].pointers = new long[] {0x002e9f2c};
        mem_card[31].text_offset = 0x002c372c;
        mem_card[31].pointers = new long[] {0x002e9f44};
        mem_card[32].text_offset = 0x002c3758;
        mem_card[32].pointers = new long[] {0x002e9f50};
        mem_card[33].text_offset = 0x002c376c;
        mem_card[33].pointers = new long[] {0x002e9f68, 0x002e9ff8};
        mem_card[34].text_offset = 0x002c378c;
        mem_card[34].pointers = new long[] {0x002e9f74, 0x002ea004};

        mem_card[35].text_offset = 0x002c37a0;
        mem_card[35].pointers = new long[] {0x002e9f80};
        mem_card[36].text_offset = 0x002c37c8;
        mem_card[36].pointers = new long[] {0x002e9f98, 0x002ea028};
        mem_card[37].text_offset = 0x002c37f8;
        mem_card[37].pointers = new long[] {0x002e9fa4, 0x002ea034};
        mem_card[38].text_offset = 0x002c3830;
        mem_card[38].pointers = new long[] {0x002e9fb0, 0x002ea040};
        mem_card[39].text_offset = 0x002c3850;
        mem_card[39].pointers = new long[] {0x002e9fc8, 0x002ea058};

        mem_card[40].text_offset = 0x002c3878;
        mem_card[40].pointers = new long[] {0x002e9fd4, 0x002ea064};
        mem_card[41].text_offset = 0x002c3894;
        mem_card[41].pointers = new long[] {0x002e9fe0, 0x002ea070};
        mem_card[42].text_offset = 0x002c38ac;
        mem_card[42].pointers = new long[] {0x002ea088, 0x002ea0b8};
        mem_card[43].text_offset = 0x002c38c0;
        mem_card[43].pointers = new long[] {0x002ea010, 0x002ea094};
        mem_card[44].text_offset = 0x002c38e4;
        mem_card[44].pointers = new long[] {0x002ea0a0, 0x002ea0d0, 0x002ea0f4,
            0x002ea118, 0x002ea184, 0x002ea40c};

        mem_card[45].text_offset = 0x002c38f8;
        mem_card[45].pointers = new long[] {0x002ea0c4};
        mem_card[46].text_offset = 0x002c391c;
        mem_card[46].pointers = new long[] {0x002ea0e8};
        mem_card[47].text_offset = 0x002c3940;
        mem_card[47].pointers = new long[] {0x002ea10c};
        mem_card[48].text_offset = 0x002c3964;
        mem_card[48].pointers = new long[] {0x002ea130, 0x002ea148};
        mem_card[49].text_offset = 0x002c3988;
        mem_card[49].pointers = new long[] {0x002ea160};

        mem_card[50].text_offset = 0x002c39bc;
        mem_card[50].pointers = new long[] {0x002ea178};
        mem_card[51].text_offset = 0x002c39dc;
        mem_card[51].pointers = new long[] {0x002ea19c, 0x002ea3d0};
        mem_card[52].text_offset = 0x002c3a0c;
        mem_card[52].pointers = new long[] {0x002ea1a8, 0x002ea1cc, 0x002ea1fc,
            0x002ea3dc};
        mem_card[53].text_offset = 0x002c3a38;
        mem_card[53].pointers = new long[] {0x002ea1c0};
        mem_card[54].text_offset = 0x002c3a68;
        mem_card[54].pointers = new long[] {0x002ea1e4};

        mem_card[55].text_offset = 0x002c3a90;
        mem_card[55].pointers = new long[] {0x002ea1f0};
        mem_card[56].text_offset = 0x002c3ac0;
        mem_card[56].pointers = new long[] {0x002ea220};
        mem_card[57].text_offset = 0x002c3ae4;
        mem_card[57].pointers = new long[] {0x002ea22c};
        mem_card[58].text_offset = 0x002c3b08;
        mem_card[58].pointers = new long[] {0x002ea244};
        mem_card[59].text_offset = 0x002c3b20;
        mem_card[59].pointers = new long[] {0x002ea25c};

        mem_card[60].text_offset = 0x002c3b40;
        mem_card[60].pointers = new long[] {0x002ea274};
        mem_card[61].text_offset = 0x002c3b60;
        mem_card[61].pointers = new long[] {0x002ea28c};
        mem_card[62].text_offset = 0x002c3b80;
        mem_card[62].pointers = new long[] {0x002ea2a4, 0x002ea424};
        mem_card[63].text_offset = 0x002c3ba4;
        mem_card[63].pointers = new long[] {0x002ea2bc, 0x002ea43c};
        mem_card[64].text_offset = 0x002c3bc8;
        mem_card[64].pointers = new long[] {0x002ea2d4};

        mem_card[65].text_offset = 0x002c3bf0;
        mem_card[65].pointers = new long[] {0x002ea2ec};
        mem_card[66].text_offset = 0x002c3c20;
        mem_card[66].pointers = new long[] {0x002ea304};
        mem_card[67].text_offset = 0x002c3c50;
        mem_card[67].pointers = new long[] {0x002ea31c};
        mem_card[68].text_offset = 0x002c3c7c;
        mem_card[68].pointers = new long[] {0x002ea334};
        mem_card[69].text_offset = 0x002c3cac;
        mem_card[69].pointers = new long[] {0x002ea34c};

        mem_card[70].text_offset = 0x002c3cc8;
        mem_card[70].pointers = new long[] {0x002ea358, 0x002ea37c, 0x002ea3a0};
        mem_card[71].text_offset = 0x002c3ce0;
        mem_card[71].pointers = new long[] {0x002ea370};
        mem_card[72].text_offset = 0x002c3d04;
        mem_card[72].pointers = new long[] {0x002ea394};
        mem_card[73].text_offset = 0x002c3d28;
        mem_card[73].pointers = new long[] {0x002ea3b8};
        mem_card[74].text_offset = 0x002c3d48;
        mem_card[74].pointers = new long[] {0x002ea3f4};

        mem_card[75].text_offset = 0x002c3d70;
        mem_card[75].pointers = new long[] {0x002ea400};
        mem_card[76].text_offset = 0x002c3d9c;
        mem_card[76].pointers = new long[] {0x002ea460};
        mem_card[77].text_offset = 0x002c3dbc;
        mem_card[77].pointers = new long[] {0x002ea46c};
        mem_card[78].text_offset = 0x002c3df0;
        mem_card[78].pointers = new long[] {0x002ea560};
        mem_card[79].text_offset = 0x002c3e00;
        mem_card[79].pointers = new long[] {0x002ea564};

        mem_card[80].text_offset = 0x002c3e10;
        mem_card[80].pointers = new long[] {0x002ea568};
        mem_card[81].text_offset = 0x002c3e20;
        mem_card[81].pointers = new long[] {0x002ea56c};
    }


    public void initNameEntry(){
        //name_entry = new DOLstring[24];
        name_entry = new DOLstring[13];
        for (int i = 0; i < name_entry.length; i++){
            name_entry[i] = new DOLstring();
        }

        name_entry[0].text_offset = 0x002c4c70;
        name_entry[0].pointers = new long[] {0x002ea8d0};
        name_entry[1].text_offset = 0x002c4c84;
        name_entry[1].pointers = new long[] {0x002ea8e0};
        name_entry[2].text_offset = 0x002c4cb8;
        name_entry[2].pointers = new long[] {0x002ea964};
        name_entry[3].text_offset = 0x002c4d34;
        name_entry[3].pointers = new long[] {0x002ead74};
        name_entry[4].text_offset = 0x002c4d40;
        name_entry[4].pointers = new long[] {0x002ead84};

        name_entry[5].text_offset = 0x002c4d4c;
        name_entry[5].pointers = new long[] {0x002ead94};
        name_entry[6].text_offset = 0x0030dbe8;
        name_entry[6].pointers = new long[] {0x002eada4};
        name_entry[7].text_offset = 0x002c4d58;
        name_entry[7].pointers = new long[] {0x002eadb4};
        name_entry[8].text_offset = 0x002c4d64;
        name_entry[8].pointers = new long[] {0x002eadc4};
        name_entry[9].text_offset = 0x0030dbf0;
        name_entry[9].pointers = new long[] {0x002eadd4};

        name_entry[10].text_offset = 0x0030dbd0;
        name_entry[10].pointers = new long[] {0x002eaab8};
        name_entry[11].text_offset = 0x0030dbd8;
        name_entry[11].pointers = new long[] {0x002eaabc, 0x002eaac0};
        name_entry[12].text_offset = 0x0030dbe0;
        name_entry[12].pointers = new long[] {0x002eaac4};
        /*name_entry[13].text_offset = 0x002be61c;
        name_entry[13].pointers = new long[] {0x002e13dc};
        name_entry[14].text_offset = 0x002be63c;
        name_entry[14].pointers = new long[] {0x002e13e0};

        name_entry[15].text_offset = 0x002be65c;
        name_entry[15].pointers = new long[] {0x002e13e4};
        name_entry[16].text_offset = 0x002be67c;
        name_entry[16].pointers = new long[] {0x002e13e8};
        name_entry[17].text_offset = 0x002be69c;
        name_entry[17].pointers = new long[] {0x002e13ec};
        name_entry[18].text_offset = 0x002be6bc;
        name_entry[18].pointers = new long[] {0x002e13f0};
        name_entry[19].text_offset = 0x002be6dc;
        name_entry[19].pointers = new long[] {0x002e13f4};

        name_entry[20].text_offset = 0x002be6fc;
        name_entry[20].pointers = new long[] {0x002e13f8};
        name_entry[21].text_offset = 0x002be71c;
        name_entry[21].pointers = new long[] {0x002e13fc};
        name_entry[22].text_offset = 0x002be73c;
        name_entry[22].pointers = new long[] {0x002e1400};
        name_entry[23].text_offset = 0x002be75c;
        name_entry[23].pointers = new long[] {0x002e1404};*/

    }


    public void changeCategory(int cat){
        saveCategory();
        current_category = cat;
        loadCategory();
    }


    public void saveCategory(){
        Component[] blines = panelLines.getComponents();

        // This might not work...
        DOLstring[] used_category = null;

        switch(current_category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }

        for (int i = 0; i < blines.length; i++){
            PanelString bl = (PanelString) blines[i];
            //lines.get(current_dialogue).get(i).editText = bl.getEditText();
            used_category[i].text = bl.getEditText();
        }

        //System.out.println(unit_ability[0].text);   // check if it worked

    }


    public void loadCategory(){
        panelLines.removeAll();
        //panelLines.repaint();

        int offX = 7;
        int offY = 10;

        int totalHeight = 20;

        // This might not work...
        DOLstring[] used_category = null;

        switch(current_category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }

        for (int i = 0; i < used_category.length; i++){
            PanelString ps = new PanelString();

            ps.setID(i + 1);
            ps.setEditText(used_category[i].text);
            ps.setSJIS(checkSJIS.isSelected());

            ps.setBounds(offX, i*115 + offY, 789, 109);

            panelLines.add(ps);

            totalHeight += 115;
        }

        panelLines.setPreferredSize(new Dimension(panelLines.getWidth() - 20, totalHeight));
        //panelLines.repaint();
        //scrollStrings.repaint();
        scrollStrings.revalidate();

    }


    // Opens the DOL file and grabs the strings of each category from it
    public void openDOL(String filename){
        try {
            RandomAccessFile f = new RandomAccessFile(filename, "r");

            for (int i = 0; i < 21; i++)
                openDOLcategory(f, i);

            // Close the file
            f.close();

            System.out.println("DOL file processed correctly.");

            loadCategory();
        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceDSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public void openDOLcategory(RandomAccessFile f, int category) throws IOException{
        DOLstring[] used_category = null;

        switch(category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }

        for (int i = 0; i < used_category.length; i++){
            f.seek(used_category[i].text_offset);
            byte b = 0x01;
            int count = 0;

            while (b != 0){
                b = f.readByte();
                count ++;
            }

            byte[] aux = new byte[count - 1];

            f.seek(used_category[i].text_offset);
            f.read(aux);

            //aux = replaceSpecialChars(aux, false);

            used_category[i].text = new String(aux, font_encoding);
        }
    }


    // Replaces the conflictive SJIS characters in a block
    // When parsing the file, the following characters are transformed:
    // Ⅰ (87 54) -> Ι (83 a7) * this one is used only in the description of the Deathgrome II
    // Ⅱ (87 55) -> П (84 50)
    // Ⅲ (87 56) -> Ш (84 59)
    // "inverted omega" (eb 3f) -> Ю (84 5f)
    // During reinsertion, the values are reversed
    // This change is necessary because otherwise, the application doesn't recognize
    // the original characters and the data is destroyed during reinsertion
    // (they're transformed to 1-byte "?" (3f) characters)
    public byte[] replaceSpecialChars(byte[] block, boolean reinsertion){
        byte[] block2 = new byte[2];

        byte[] origI = new byte[]{(byte) 0x87, (byte) 0x54};
        byte[] origII = new byte[]{(byte) 0x87, (byte) 0x55};
        byte[] origIII = new byte[]{(byte) 0x87, (byte) 0x56};
        byte[] origGameo = new byte[]{(byte) 0xeb, (byte) 0x3f};

        byte[] newI = new byte[]{(byte) 0x83, (byte) 0xa7};
        byte[] newII = new byte[]{(byte) 0x84, (byte) 0x50};
        byte[] newIII = new byte[]{(byte) 0x84, (byte) 0x59};
        byte[] newGameo = new byte[]{(byte) 0x84, (byte) 0x5f};

        boolean stop = false;

        for (int i = 0; i < block.length && !stop; i++){
            block2[0] = block[i];
            block2[1] = block[i + 1];

            if (!reinsertion){
                if (block2[0] == origI[0] && block2[1] == origI[1]){
                    block[i] = newI[0];
                    block[i + 1] = newI[1];
                }
                else if (block2[0] == origII[0] && block2[1] == origII[1]){
                    block[i] = newII[0];
                    block[i + 1] = newII[1];
                }
                else if (block2[0] == origIII[0] && block2[1] == origIII[1]){
                    block[i] = newIII[0];
                    block[i + 1] = newIII[1];
                }
                else if (block2[0] == origGameo[0] && block2[1] == origGameo[1]){
                    block[i] = newGameo[0];
                    block[i + 1] = newGameo[1];
                }
            }
            else{
                if (block2[0] == newI[0] && block2[1] == newI[1]){
                    block[i] = origI[0];
                    block[i + 1] = origI[1];
                }
                else if (block2[0] == newII[0] && block2[1] == newII[1]){
                    block[i] = origII[0];
                    block[i + 1] = origII[1];
                }
                else if (block2[0] == newIII[0] && block2[1] == newIII[1]){
                    block[i] = origIII[0];
                    block[i + 1] = origIII[1];
                }
                else if (block2[0] == newGameo[0] && block2[1] == newGameo[1]){
                    block[i] = origGameo[0];
                    block[i + 1] = origGameo[1];
                }
            }

            // There are some titles that end with 3 1-byte characters, so we have to
            // control we're not getting out of the block
            if (i + 2 > block.length - 1)
                stop = true;
        }

        return block;
    }


    // Converts SJIS text in ASCII text (only common characters)
    public String convertToASCII(String text){
        String newText = "";

        for (int i = 0; i < text.length(); i++){
            char c = text.charAt(i);
            char ascii_char = SJIStoASCII(c);

            newText += ascii_char;
        }

        return newText;
    }
    
    
    // Converts a SJIS char to ASCII
    public char SJIStoASCII(char c){
        char newChar = ' ';
        
        // SJIS characters
        char char_a = 'ａ';
        char char_z = 'ｚ';
        char char_A = 'Ａ';
        char char_Z = 'Ｚ';
        char char_0 = '０';
        char char_9 = '９';
        
        if (c >= char_0 && c <= char_9){
            int difference = c - char_0;
            newChar = '0';
            newChar += difference;
        }
        else if (c >= char_A && c <= char_Z){
            int difference = c - char_A;
            newChar = 'A';
            newChar += difference;
        }
        else{ 
            if (c >= char_a && c <= char_z){
                int difference = c - char_a;
                newChar = 'a';
                newChar += difference;
            }
            else{
                switch (c){
                    case '　':
                        newChar = ' ';
                        break;
                    case '！':
                        newChar = '!';
                        break;
                    case '″':
                        newChar = '\"';
                        break;
                    case '＃':
                        newChar = '#';
                        break;
                    case '％':
                        newChar = '%';
                        break;
                    case '＆':
                        newChar = '&';
                        break;
                    case '′':
                        newChar = '\'';
                        break;
                    case '（':
                        newChar = '(';
                        break;
                    case '）':
                        newChar = ')';
                        break;
                    case '＊':
                        newChar = '*';
                        break;
                    case '＋':
                        newChar = '+';
                        break;
                    case '，':
                        newChar = ',';
                        break;
                    case '−':
                    case '－':
                        newChar = '-';
                        break;
                    case '．':
                        newChar = '.';
                        break;
                    case '／':
                        newChar = '/';
                        break;
                    case '：':
                        newChar = ':';
                        break;
                    case '；':
                        newChar = ';';
                        break;
                    case '＜':
                        newChar = '<';
                        break;
                    case '＝':
                        newChar = '=';
                        break;
                    case '＞':
                        newChar = '>';
                        break;
                    case '？':
                        newChar = '?';
                        break;
                    case '＠':
                        newChar = '@';
                        break;
                    default:    // Leave the character as SJIS if it's none of the others
                        newChar = c;
                }
            }
        }
        
        return newChar;
    }

    
    
    // Saves the strings to a bin file
    public void saveBIN(String filename){
        try {
            if (!filename.endsWith(".bin") && !filename.endsWith(".BIN"))
                filename += ".bin";

            RandomAccessFile f = new RandomAccessFile(filename, "rw");
            
            // Truncate the file (in case we're overwriting)
            f.setLength(0);

            for (int i = 0; i < 21; i++)
                saveBINcategory(f, i);

            f.close();

            System.out.println(filename + " written successfully.");
        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceDSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public void saveBINcategory(RandomAccessFile f, int category) throws IOException{
        byte[] text = null;
        byte[] padding = null;
        int used = 0;
        int rest = 0;

        DOLstring[] used_category = null;

        switch(category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }

        for (int i = 0; i < used_category.length; i++){
            text = used_category[i].text.getBytes(font_encoding);

            //text = replaceSpecialChars(text, true);

            // The text has to end with at least one 00 byte, and its length has to be a multiple of 4
            used = text.length + 1;
            rest = used % 4;

            if ( rest == 0 )
                padding = new byte[1];
            else
                padding = new byte[5 - rest];

            f.write(text);
            f.write(padding);
        }
    }


    // Opens a previously exported BIN file and grabs the strings of each category from it
    public void openBIN(String filename){
        try {
            RandomAccessFile f = new RandomAccessFile(filename, "r");

            long offset = 0;

            for (int i = 0; i < 21; i++)
                offset = openBINcategory(f, offset, i);

            // Close the file
            f.close();

            System.out.println(filename + " processed correctly.");

            loadCategory();
        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceDSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public long openBINcategory(RandomAccessFile f, long offset, int category) throws IOException{
        DOLstring[] used_category = null;

        switch(category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }


        for (int i = 0; i < used_category.length; i++){
            f.seek(offset);
            byte b = 0x01;
            int count = 0;

            while (b != 0){
                b = f.readByte();
                count ++;
            }

            byte[] aux = new byte[count - 1];

            f.seek(offset);
            f.read(aux);

            //aux = replaceSpecialChars(aux, false);

            if (count % 4 == 0)
                offset += count;
            else{
                offset += count + (4 - (count % 4) );
            }

            used_category[i].text = new String(aux, font_encoding);
        }

        return offset;
    }


    // Changes the pointers in the DOL files to accomodate the text in the inserted BIN file
    public void overrideDOL(String filename){
        try {
            long pointer_value = Long.parseLong(textfieldOffset.getText(), 16);

            RandomAccessFile f = new RandomAccessFile(filename, "rw");

            for (int i = 0; i < 21; i++)
                pointer_value = overrideCategory(f, pointer_value, i);

            f.close();

            System.out.println(filename + " has been overwritten successfully.");
        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceDSE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public long overrideCategory(RandomAccessFile f, long pointer_value, int category) throws IOException{
        byte[] text;
        byte[] pointer = new byte[4];

        DOLstring[] used_category = null;

        switch(category){
            case 0:
                used_category = unit_ability;
                break;
            case 1:
                used_category = pilot_skill;
                break;
            case 2:
                used_category = fub;
                break;
            case 3:
                used_category = series;
                break;
            case 4:
                used_category = bgm;
                break;
            case 5:
                used_category = search;
                break;
            case 6:
                used_category = option;
                break;
            case 7:
                used_category = scenario;
                break;
            case 8:
                used_category = capture;
                break;
            case 9:
                used_category = deploy;
                break;
            case 10:
                used_category = extra;
                break;
            case 11:
                used_category = layzner;
                break;
            case 12:
                used_category = win;
                break;
            case 13:
                used_category = lose;
                break;
            case 14:
                used_category = black_screen;
                break;
            case 15:
                used_category = opening;
                break;
            case 16:
                used_category = ending;
                break;
            case 17:
                used_category = staff;
                break;
            case 18:
                used_category = cast;
                break;
            case 19:
                used_category = mem_card;
                break;
            case 20:
                used_category = name_entry;
                break;
        }

        // Overwrite pointers
        for (int i = 0; i < used_category.length; i++){
            pointer[0] = (byte) ( (pointer_value >> 24) & 0xff );
            pointer[1] = (byte) ( (pointer_value >> 16) & 0xff );
            pointer[2] = (byte) ( (pointer_value >> 8) & 0xff );
            pointer[3] = (byte) ( pointer_value & 0xff );

            for (int j = 0; j < used_category[i].pointers.length; j++){
                f.seek(used_category[i].pointers[j]);
                f.write(pointer);
            }

            text = used_category[i].text.getBytes(font_encoding);

            int count = text.length + 1;
            int padding = 0;

            if (count % 4 != 0)
                padding = 4 - (count %4);

            pointer_value += count + padding;
        }

        return pointer_value;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkSJIS;
    private javax.swing.JComboBox comboCategory;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelCategory;
    private javax.swing.JLabel labelOffset;
    private javax.swing.JMenuItem menuConvertASCII;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuTools;
    private javax.swing.JMenuItem menuitemConvertSJIS;
    private javax.swing.JMenuItem menuitemExit;
    private javax.swing.JMenuItem menuitemExport;
    private javax.swing.JMenuItem menuitemImportBIN;
    private javax.swing.JMenuItem menuitemOpenDOL;
    private javax.swing.JMenuItem menuitemOverride;
    private javax.swing.JPanel panelLines;
    private javax.swing.JPanel panelNavigation;
    private javax.swing.JScrollPane scrollStrings;
    private javax.swing.JTextField textfieldOffset;
    // End of variables declaration//GEN-END:variables

}
